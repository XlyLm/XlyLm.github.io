<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【源码系列-JS】new实现、继承</title>
      <link href="/posts/2851167815/"/>
      <url>/posts/2851167815/</url>
      
        <content type="html"><![CDATA[<h1 id="一、new实现"><a href="#一、new实现" class="headerlink" title="一、new实现"></a>一、new实现</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><blockquote><p> new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一  </p></blockquote><h2 id="2、步骤"><a href="#2、步骤" class="headerlink" title="2、步骤"></a>2、步骤</h2><ul><li>用 <code>new Object()</code> 的方式创建一个空对象<code>obj</code>。</li><li>获取第一个参数，就是我们要传入的构造函数。此外因为 shift 会修改原数组，所以 <code>arguments</code> 会被去除第一个参数。</li><li>将 <code>obj</code> 的原型指向构造函数，这样 <code>obj</code> 就可以访问到构造函数原型中的属性。</li><li>使用 <code>apply</code>，改变构造函数 <code>this</code> 的指向到新建的对象，这样 obj 就可以访问到构造函数中的属性。</li><li>判断<code>apply</code>返回的值是不是一个对象，如果是一个对象，我们就返回这个对象，如果不是就返回<code>obj</code>。</li></ul><h2 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">newObject</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(),</span><br><span class="line">    <span class="title class_">Constructor</span> = [].<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);<span class="comment">//获取构造函数</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="title class_">Constructor</span>.<span class="title function_">apply</span>(obj, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> ? res : obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title function_">newObject</span>(<span class="title class_">Fn</span> [,params]);<span class="comment">//Fn为构造函数</span></span><br></pre></td></tr></table></figure><h1 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h1><h2 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h2><p><strong>介绍：</strong></p><p>将子类的原型对象设为父类的一个实例，子类就可以访问隶属于父类的属性和方法。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child.<span class="title function_">getName</span>();<span class="comment">//tom</span></span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><p>创建Child实例时，无法向Parent传参</p><p>应用类型的属性都会被所有实例共享</p><h2 id="2、构造函数继承"><a href="#2、构造函数继承" class="headerlink" title="2、构造函数继承"></a>2、构造函数继承</h2><p><strong>介绍：</strong></p><p>在Child里使用<code>call</code>调用Parent，并绑定<code>this</code>。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">[params]</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;jike&quot;</span>;</span><br><span class="line">    <span class="comment">//this.params = params;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">[params]</span>)&#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span> [,params]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有参数</span></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">name</span>);<span class="comment">//jike</span></span><br><span class="line"><span class="comment">//有参数</span></span><br><span class="line"><span class="comment">//let child = new Child(4);</span></span><br><span class="line"><span class="comment">//console.log(child.name,child.pramas);//jike,4</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>避免了引用类型的属性被所有实例共享 </li><li>可以在 Child 中向 Parent 传参</li></ul><p><strong>缺点：</strong></p><ul><li>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</li></ul><h2 id="3、组合继承"><a href="#3、组合继承" class="headerlink" title="3、组合继承"></a>3、组合继承</h2><p><strong>介绍：</strong></p><p> 通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用 。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;jike&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">name</span>);<span class="comment">//jike</span></span><br><span class="line">child.<span class="title function_">getAge</span>();<span class="comment">//18</span></span><br></pre></td></tr></table></figure><p> <strong>优点：</strong></p><p>融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。 </p><h2 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h2><p><strong>介绍：</strong></p><p> 就是 <code>ES5 Object.create</code> 的模拟实现，将传入的对象作为创建的对象的原型。 </p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><p> 包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。 </p><h2 id="5、寄生式继承"><a href="#5、寄生式继承" class="headerlink" title="5、寄生式继承"></a>5、寄生式继承</h2><p><strong>介绍：</strong></p><p> 创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。 </p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line">    clone.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>缺点：</strong></p><p>跟借用构造函数模式一样，每次创建对象都会创建一遍方法。 </p><h2 id="6、寄生组合继承"><a href="#6、寄生组合继承" class="headerlink" title="6、寄生组合继承"></a>6、寄生组合继承</h2><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">18</span>);</span><br><span class="line">child.<span class="title function_">getName</span>();<span class="comment">//tom</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong> 组合继承最大的缺点是会调用两次父构造函数。 </p><h2 id="7、进阶最终版"><a href="#7、进阶最终版" class="headerlink" title="7、进阶最终版"></a>7、进阶最终版</h2><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prototype</span>(<span class="params">child, parent</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prototype = <span class="title function_">object</span>(parent.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    prototype.<span class="property">constructor</span> = child;</span><br><span class="line">    child.<span class="property"><span class="keyword">prototype</span></span> = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们使用的时候：</span></span><br><span class="line"><span class="title function_">prototype</span>(<span class="title class_">Child</span>, <span class="title class_">Parent</span>);</span><br></pre></td></tr></table></figure><p><strong>over…</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码系列-JS】手写promise</title>
      <link href="/posts/3892510642/"/>
      <url>/posts/3892510642/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍promise"><a href="#一、介绍promise" class="headerlink" title="一、介绍promise"></a>一、介绍promise</h1><ul><li><p><code>Promise</code>是<code>JS</code>进行异步编程的新的解决方案 。</p></li><li><p>Promise 必须为以下三种状态之一：</p><p>等待态（Pending）、执行态（Fulfilled）和拒绝态（Rejected。一旦Promise 被 resolve 或 reject，不能再迁移至其他任何状态（即状态 immutable）。 </p></li><li><p>基本过程：</p><ol><li>初始化 Promise 状态（pending）</li><li>立即执行 Promise 中传入的 fn 函数，将Promise 内部 resolve、reject 函数作为参数传递给 fn ，按事件机制时机处理</li><li>执行 then(..) 注册回调处理数组（then 方法可被同一个 promise 调用多次）</li><li>Promise里的关键是要保证，then方法传入的参数 onFulfilled 和 onRejected，必须在then方法被调用的那一轮事件循环之后的新执行栈中执行。</li></ol></li></ul><h1 id="二、实现resolve和reject"><a href="#二、实现resolve和reject" class="headerlink" title="二、实现resolve和reject"></a>二、实现resolve和reject</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myPromise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">result</span> = reason;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fun</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fun</span>();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fun</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fun</span>();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (reason) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br></pre></td></tr></table></figure><p><strong>运行截图：</strong></p><p><img src="/img/%E6%BA%90%E7%A0%81/promise_1.png" alt="picture"></p><h1 id="三、实现then方法"><a href="#三、实现then方法" class="headerlink" title="三、实现then方法"></a>三、实现then方法</h1><p><strong>处理链式调用：</strong></p><ul><li>then方法本身会返回一个新的Promise对象</li><li>如果返回值是promise对象，返回值为成功，新promise就是成功</li><li>如果返回值是promise对象，返回值为失败，新promise就是失败</li><li>如果返回值非promise对象，新promise对象就是成功，值为此返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">myPromise.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled != <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        onFulfilled = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> reason;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected != <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        onRejected = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newPromise = <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">resolvePromise</span> = callback =&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> res = <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">result</span>);</span><br><span class="line">                <span class="keyword">if</span>(res <span class="keyword">instanceof</span> myPromise)&#123;</span><br><span class="line">                    <span class="comment">// 如果返回值是Promise</span></span><br><span class="line">                    <span class="comment">// 如果返回值是promise对象，返回值为成功，新promise就是成功</span></span><br><span class="line">                    <span class="comment">// 如果返回值是promise对象，返回值为失败，新promise就是失败</span></span><br><span class="line">                    <span class="comment">// 谁知道返回的promise是失败成功？只有then知道</span></span><br><span class="line">                    res.<span class="title function_">then</span>(resolve,reject);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 非Promise就是成功</span></span><br><span class="line">                    <span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(e)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;fulfilled&quot;</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果当前为成功状态，执行第一个回调</span></span><br><span class="line">            <span class="title function_">resolvePromise</span>(onFulfilled)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;rejected&quot;</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果当前为失败状态，执行第二哥回调</span></span><br><span class="line">            <span class="title function_">resolvePromise</span>(onRejected)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;pending&quot;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(resolvePromise.<span class="title function_">bind</span>(<span class="variable language_">this</span>,onFulfilled))</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(resolvePromise.<span class="title function_">bind</span>(<span class="variable language_">this</span>,onRejected))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> newPromise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、实现catch方法"><a href="#四、实现catch方法" class="headerlink" title="四、实现catch方法"></a>四、实现catch方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myPromise.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">onRejected</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onRejected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、实现finally方法"><a href="#五、实现finally方法" class="headerlink" title="五、实现finally方法"></a>五、实现finally方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">myPromise.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fn</span>();</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fn</span>();</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、实现all方法"><a href="#六、实现all方法" class="headerlink" title="六、实现all方法"></a>六、实现all方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接受一个promise数组，当所有promise状态resolve后，执行resolve</span></span><br><span class="line">myPromise.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (promises.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> result = [];</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                promises[i].<span class="title function_">then</span>(</span><br><span class="line">                    <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                        result[i] = data;</span><br><span class="line">                        <span class="keyword">if</span> (++index === promises.<span class="property">length</span>) &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(result);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、实现race方法"><a href="#七、实现race方法" class="headerlink" title="七、实现race方法"></a>七、实现race方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接受一个promise数组，当有一个promise状态resolve后，执行resolve</span></span><br><span class="line">myPromise.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (promises.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                promises[i].<span class="title function_">then</span>(</span><br><span class="line">                    <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(data);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、实现静态方法"><a href="#八、实现静态方法" class="headerlink" title="八、实现静态方法"></a>八、实现静态方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">myPromise.<span class="property">resolve</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myPromise.<span class="property">reject</span> = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、为什么要使用promise？"><a href="#九、为什么要使用promise？" class="headerlink" title="九、为什么要使用promise？"></a>九、为什么要使用promise？</h1><ol><li><p>指定回调函数的方式更加灵活：<br>传统的回调函数是在启动异步任务前指定<br>Promise：启动异步任务 &#x3D;&gt; 返回Promise对象&#x3D;&gt;给Promise对象绑定回调函数（甚至可以在异步任务结束后指定）</p></li><li><p>支持链式调用，可以解决回调地域问题</p></li><li><p>什么是回调地狱？</p><p>回调函数嵌套调用，外部回调函数执行的结果是嵌套的回调函数执行的条件。 </p></li><li><p>回调地狱的缺点：</p><p>不便于阅读，不便于异常处理</p></li><li><p>解决方案？</p><p>Promise链式调用</p></li><li><p>终极解决方案？</p><p><code>async/await</code></p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码系列-JS】call、apply、bind</title>
      <link href="/posts/2632569219/"/>
      <url>/posts/2632569219/</url>
      
        <content type="html"><![CDATA[<h1 id="一、call的实现"><a href="#一、call的实现" class="headerlink" title="一、call的实现"></a>一、call的实现</h1><p><strong>使用：</strong></p><ul><li>调用 call 的对象，必须是个函数 Function。</li><li>call 的第一个参数，是一个对象。 Function 的调用者，将会指向这个对象。如果不传，则默认为全局对象 window。</li><li>第二个参数开始，可以接收任意个参数。</li></ul><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="title function_">call</span>(thisVal [,[param1],...]);</span><br></pre></td></tr></table></figure><p><strong>实现步骤：</strong></p><ul><li>将函数设为对象的属性</li><li>执行、删除这个函数</li><li>将this指定给函数，并传入给定的参数</li><li>如果没有<code>thisVal</code>参数，则默认指向<code>window</code></li></ul><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context,...args</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="literal">null</span>;</span><br><span class="line">    context = context || <span class="variable language_">window</span>;<span class="comment">//判断是否传入thisVal，没有则指向window</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>;<span class="comment">//将函数所有者当作目标的属性</span></span><br><span class="line">    res = context.<span class="title function_">fn</span>(...args);<span class="comment">//调用函数</span></span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、apply的实现"><a href="#二、apply的实现" class="headerlink" title="二、apply的实现"></a>二、apply的实现</h1><p><strong>使用：</strong></p><ul><li>它的调用者必须是函数 Function，并且只接收两个参数，第一个参数的规则与 call 一致。</li><li>第二个参数，必须是数组或者类数组，它们会被转换成类数组</li></ul><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="title function_">apply</span>(thisVal [,argArray]);</span><br></pre></td></tr></table></figure><p><strong>实现步骤：</strong></p><ul><li>将函数设为对象的属性</li><li>执行、删除这个函数</li><li>指定this到函数并传入给定的执行参数</li><li>如果不传入参数，默认指向window</li></ul><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context,...args</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="literal">null</span>;</span><br><span class="line">    context = context || <span class="variable language_">window</span>;<span class="comment">//判断是否存在thisVal，没有则指向window</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>;<span class="comment">//将函数所有者当作目标的属性</span></span><br><span class="line">    <span class="keyword">if</span>(arg.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    res = context.<span class="title function_">fn</span>(...arg);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res = context.<span class="title function_">fn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、bind的实现"><a href="#三、bind的实现" class="headerlink" title="三、bind的实现"></a>三、bind的实现</h1><p><strong>使用：</strong></p><ul><li>bind 的使用和call类似，不同点在于是否立即执行</li><li>bind 会返回一个函数，用于以后调用</li></ul><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newFn = <span class="title class_">Function</span>.<span class="title function_">call</span>(thisVal [,[param1],...]);</span><br></pre></td></tr></table></figure><p><strong>实现步骤：</strong></p><ul><li>返回一个新函数，新函数执行的this才指定bind的第一个参数</li><li>bind的剩余参数，传递给新的函数</li><li>返回后的函数是自我调用，且可以接受新的参数</li><li>通过new调用时，this指向为实例化对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Error!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> fNOP = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fBound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> bindArgs = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="variable language_">this</span> : context, args.<span class="title function_">concat</span>(bindArgs));</span><br><span class="line">        <span class="comment">//判断self调用的环境，</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>();</span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码系列-JS】节流函数</title>
      <link href="/posts/1230976310/"/>
      <url>/posts/1230976310/</url>
      
        <content type="html"><![CDATA[<h1 id="实现节流函数"><a href="#实现节流函数" class="headerlink" title="实现节流函数"></a>实现节流函数</h1><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p><strong>节流源理：</strong> 一段时间内，事件只能被触发一次。</p><p> 关于节流的实现，有两种主流的实现方式，一种是使用时间戳，一种是设置定时器。 </p><h2 id="二、使用时间戳"><a href="#二、使用时间戳" class="headerlink" title="二、使用时间戳"></a>二、使用时间戳</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fun, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context, args;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        context = <span class="variable language_">this</span>;</span><br><span class="line">        args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            fun.<span class="title function_">apply</span>(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当触发事件的时候，我们取出当前的时间戳，然后减去之前的时间戳 ， 如果大于设置的时间周期，就执行函数，然后更新时间戳为当前的时间戳，如果小于，就不执行。 </p><h2 id="三、使用定时器"><a href="#三、使用定时器" class="headerlink" title="三、使用定时器"></a>三、使用定时器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fun, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        context = <span class="variable language_">this</span>;</span><br><span class="line">        args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">                fun.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当触发事件的时候，我们设置一个定时器，再触发事件的时候，如果定时器存在，就不执行，直到定时器执行，然后执行函数，清空定时器，这样就可以设置下个定时器。 </p><h2 id="四、1-1最终版"><a href="#四、1-1最终版" class="headerlink" title="四、1+1最终版"></a>四、1+1最终版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fun, wait, options</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer, context, args, result;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> later = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        previous = options.<span class="property">leading</span> === <span class="literal">false</span> ? <span class="number">0</span> : <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">        fun.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timer) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> throttled = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">        <span class="keyword">if</span> (!previous &amp;&amp; options.<span class="property">leading</span> === <span class="literal">false</span>) previous = now;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> remaining = wait - (now - previous);</span><br><span class="line">        context = <span class="variable language_">this</span>;</span><br><span class="line">        args = <span class="variable language_">arguments</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            previous = now;</span><br><span class="line">            fun.<span class="title function_">apply</span>(context, args);</span><br><span class="line">            <span class="keyword">if</span> (!timer) context = args = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.<span class="property">trailing</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(later, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    throttled.<span class="property">cancel</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    previous = <span class="number">0</span>;</span><br><span class="line">    timer = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们设置个 <code>options</code> 作为第三个参数，然后根据传的值判断到底哪种效果，我们约定:</p><p><code>leading</code>：<code>false</code> 表示禁用第一次执行。<br><code>trailing</code>：<code>false</code> 表示禁用停止触发的回调。</p><p><strong>注:</strong> 如果没有需求，可以把<code>option</code>这个控制参数去掉,使代码简单化。 </p><hr>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码系列-JS】防抖函数</title>
      <link href="/posts/2986829306/"/>
      <url>/posts/2986829306/</url>
      
        <content type="html"><![CDATA[<h1 id="实现防抖函数"><a href="#实现防抖函数" class="headerlink" title="实现防抖函数"></a>实现防抖函数</h1><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p><strong>防抖的原理是：</strong>多次触发事件，回调函数只执行一次，且是最后触发的那次。也就是说，当时间触发时，会先等待一段时间，如果在等待时间内，时间又被触发，则会取消上次触发，重新进入等待，如果在等待时间内没有再次被触发，则会执行相应的回调函数。</p><h2 id="二、基础版"><a href="#二、基础版" class="headerlink" title="二、基础版"></a>二、基础版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,wait</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(context,args);</span><br><span class="line">        &#125;,wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>记着改变<code>this</code>指向，以及参数(arguments)传递。</strong></p><h2 id="三、进阶版"><a href="#三、进阶版" class="headerlink" title="三、进阶版"></a>三、进阶版</h2><p>基础版会在事件停止触发后执行，但想在事件触发开头就执行的话：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fun, wait, immediate</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="comment">// 如果已经执行过，不再执行</span></span><br><span class="line">            <span class="keyword">let</span> callNow = !timer;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span> (callNow) fun.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路：</strong> 当<code>immediate</code>为<code>false</code>时，此函数和基础版相同；当<code>immediate</code>为<code>true</code>时，’第一次触发‘<code>timer</code>为<code>null</code>，<code>callNow</code>为<code>true</code>，回调函数会立即执行，定时器被赋值，而定时器会在等待时间后将<code>timer</code>定位<code>null</code>。当在等待时间内时间被再次触发时，因为timer不为null，所以<code>callNow</code>为<code>null</code>，此时回调函数不会被触发。</p><h2 id="四、最终版"><a href="#四、最终版" class="headerlink" title="四、最终版"></a>四、最终版</h2><p>为防抖函数添加取消功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fun, wait, immediate</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timer, result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> debounced = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="comment">// 如果已经执行过，不再执行</span></span><br><span class="line">            <span class="keyword">let</span> callNow = !timer;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span> (callNow) fun.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                fun.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    debounced.<span class="property">cancel</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有需求，可以为防抖函数添加一个返回值。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码系列-JS】trim、curry、flat</title>
      <link href="/posts/3043737521/"/>
      <url>/posts/3043737521/</url>
      
        <content type="html"><![CDATA[<h1 id="一、实现trim"><a href="#一、实现trim" class="headerlink" title="一、实现trim"></a>一、实现trim</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trim</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/^\s\s*/</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\s\s*$/</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="title function_">trim</span>(<span class="string">&quot;   123   &quot;</span>);</span><br><span class="line"><span class="comment">//str = &quot;123&quot;;</span></span><br></pre></td></tr></table></figure><p>该方法动用了两次正则替换，实际速度非常惊人 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trim</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/^\s+/</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\s+$/</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="title function_">trim</span>(<span class="string">&quot;  123  &quot;</span>);</span><br><span class="line"><span class="comment">//str = &quot;123&quot;;</span></span><br></pre></td></tr></table></figure><p>   该方法 和实现1很相似，但稍慢一点，主要原因是它最先是假设至少存在一个空白符。 </p><h1 id="二、实现函数柯里化"><a href="#二、实现函数柯里化" class="headerlink" title="二、实现函数柯里化"></a>二、实现函数柯里化</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p> 函数柯里化（curry）是函数式编程里面的概念。curry的概念很简单：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。 </p><p> 简单点来说就是：每次调用函数时，它只接受一部分参数，并返回一个函数，直到传递所有参数为止。 </p><h2 id="2、实现代码"><a href="#2、实现代码" class="headerlink" title="2、实现代码"></a>2、实现代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">curry</span> = (<span class="params">fn,...args</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> args.<span class="property">length</span> &gt;= fn.<span class="property">length</span> <span class="comment">//函数的参数个数可以直接通过函数数的.length属性来访问</span></span><br><span class="line">    ? <span class="title function_">fn</span>(...args)   <span class="comment">//传入的参数大于等于原始函数fn的参数个数，则直接执行该函数</span></span><br><span class="line">    : <span class="function">(<span class="params">..._args</span>)=&gt;</span>&#123;<span class="keyword">return</span> <span class="title function_">curry</span>(fn,...args,..._args);&#125;; <span class="comment">//传入的参数小于原始函数fn的参数个数时,</span></span><br><span class="line">    <span class="comment">// 则继续对当前函数进行柯里化，返回一个接受所有参数（当前参数和剩余参数）的函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add = <span class="title function_">curry</span>(add1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));<span class="comment">//6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));<span class="comment">//6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>));<span class="comment">//6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>));<span class="comment">//6</span></span><br></pre></td></tr></table></figure><p><strong>函数柯里化的作用：</strong> 参数复用、提前返回、延迟执行。</p><h1 id="三、扁平数组"><a href="#三、扁平数组" class="headerlink" title="三、扁平数组"></a>三、扁平数组</h1><p><strong>实现思路：</strong>  在数组中找到是数组类型的元素，然后将他们展开。 </p><p><strong>遍历数组的方法：</strong> <code>for 循环</code>、<code>for...of</code>、<code>for...in</code>、<code>forEach()</code>、<code>entries()</code>、<code>keys()</code>、<code>values()</code>、<code>reduce()</code>、<code>map()</code></p><p><strong>判断元素是否是数组：</strong></p><ul><li><code>instanceof</code></li><li><code>constructor</code></li><li><code>Object.prototype.toString</code></li><li><code>isArray</code></li></ul><p><strong>将数组元素展开：</strong></p><ul><li>扩展运算符 + <code>concat</code> </li><li><code>concat</code> +<code> apply</code></li></ul><h2 id="1、使用reduce实现flat"><a href="#1、使用reduce实现flat" class="headerlink" title="1、使用reduce实现flat"></a>1、使用<code>reduce</code>实现<code>flat</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatReduce</span>(<span class="params">arr, num = <span class="number">1</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;flatReduce参数错误，flatReduce(function, number).&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Number</span>(num) || <span class="title class_">Number</span>(num) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span> ? arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">flatReduce</span>(cur, --num) : cur)</span><br><span class="line">    &#125;,[])</span><br><span class="line">        :arr.<span class="title function_">slice</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、使用栈的思想实现flat"><a href="#2、使用栈的思想实现flat" class="headerlink" title="2、使用栈的思想实现flat"></a>2、使用栈的思想实现<code>flat</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatStack</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;flatReduce参数错误，flatReduce(function, number)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">const</span> stack = [].<span class="title function_">concat</span>(arr);  <span class="comment">// 将数组元素拷贝至栈，直接赋值会改变原数组</span></span><br><span class="line">    <span class="comment">//如果栈不为空，则循环遍历</span></span><br><span class="line">    <span class="keyword">while</span> (stack.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> val = stack.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(val)) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(...val); <span class="comment">//如果是数组再次入栈，并且展开了一层</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">unshift</span>(val); <span class="comment">//如果不是数组就将其取出来放入结果数组中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong> 数组元素也可能是数组，需要递归引用flat。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【烧脑算法】数组算法</title>
      <link href="/posts/1434106632/"/>
      <url>/posts/1434106632/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数组中的第k个最大元素"><a href="#一、数组中的第k个最大元素" class="headerlink" title="一、数组中的第k个最大元素"></a>一、数组中的第k个最大元素</h1><h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><p><strong>思路：</strong></p><p>返回第k次遍历数组的值。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findKthLargest</span>(<span class="params">nums, k</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = nums.<span class="property">length</span>; i &gt; nums.<span class="property">length</span> - k - <span class="number">1</span>; i--)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[j] &gt; nums[i])&#123;</span><br><span class="line">        [nums[j], nums[i]] = [nums[i], nums[j]]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums[nums.<span class="property">length</span> - k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、堆排序"><a href="#2、堆排序" class="headerlink" title="2、堆排序"></a>2、堆排序</h2><p><strong>思路：</strong></p><p> 利用原地堆排序的思想，将前k-1大的元素加入队尾，最后队顶的元素就是第k大的元素 。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findKthLargest</span>(<span class="params">nums, k</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> heapSize = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="title function_">buildMaxHeap</span>(nums, heapSize); <span class="comment">//构建大顶堆 大小为heapSize</span></span><br><span class="line">    <span class="comment">//大顶堆 前k-1个堆顶元素不断和数组的末尾元素交换 然后重新heapify堆顶元素</span></span><br><span class="line">    <span class="comment">//这个操作就是之前小顶堆出堆顶的操作，只不过现在是原地排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">1</span>; i &gt;= nums.<span class="property">length</span> - k + <span class="number">1</span>; i--)&#123;</span><br><span class="line">        <span class="title function_">swap</span>(nums, <span class="number">0</span>, i);<span class="comment">//交换堆顶和数组末尾元素</span></span><br><span class="line">        --heapSize; <span class="comment">//堆大小减1</span></span><br><span class="line">        <span class="title function_">maxHeapify</span>(nums, <span class="number">0</span>, heapSize);<span class="comment">//重新heapify</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>];<span class="comment">//返回堆顶元素，就是第k大的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">buildMaxHeap</span>(<span class="params">nums, heapSize</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(heapSize / <span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;<span class="comment">//从第一个非叶子节点开始构建</span></span><br><span class="line">            <span class="title function_">maxHeapify</span>(nums, i, heapSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从左向右，自上而下的调整节点</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">maxHeapify</span>(<span class="params">nums, i, heapSize</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> l = i * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//左节点</span></span><br><span class="line">        <span class="keyword">let</span> r = i * <span class="number">2</span> + <span class="number">2</span>;<span class="comment">//右节点</span></span><br><span class="line">        <span class="keyword">let</span> largest = i;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; heapSize &amp;&amp; nums[l] &gt; nums[largest])&#123;</span><br><span class="line">            largest = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &lt; heapSize &amp;&amp; nums[r] &gt; nums[largest])&#123;</span><br><span class="line">            largest = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(largest !== i)&#123;</span><br><span class="line">            <span class="title function_">swap</span>(nums, i, largest); <span class="comment">//找到左右节点中大的元素交换</span></span><br><span class="line">            <span class="comment">//递归交换后面的节点</span></span><br><span class="line">            <span class="title function_">maxHeapify</span>(nums, largest, heapSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">a, i, j</span>)&#123;<span class="comment">//交换函数</span></span><br><span class="line">        <span class="keyword">let</span> temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、快速排序"><a href="#3、快速排序" class="headerlink" title="3、快速排序"></a>3、快速排序</h2><p><strong>思路：</strong></p><p> 借鉴快排的思路，不断随机选择基准元素，看进行partition之后，该元素是不是在<code>n-k</code>的位置。 </p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findKthLargest</span>(<span class="params">nums, k</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">quick</span>(<span class="params">l, r</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>;<span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">let</span> random = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (r - l + <span class="number">1</span>)) + l; <span class="comment">//随机选取一个索引</span></span><br><span class="line">        <span class="title function_">swap</span>(nums, random, r); <span class="comment">//将它和位置r的元素交换，让nums[r]作为基准元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对基准元素进行partition</span></span><br><span class="line">        <span class="keyword">let</span> pivotIndex = <span class="title function_">partition</span>(nums, l, r);</span><br><span class="line">        <span class="comment">//进行partition之后，基准元素左边的元素都小于它 右边的元素都大于它</span></span><br><span class="line">        <span class="comment">//如果partition之后，这个基准元素的位置pivotIndex正好是n-k 则找大了第k大的数</span></span><br><span class="line">        <span class="comment">//如果n-k&lt;pivotIndex,则在pivotIndex的左边递归查找</span></span><br><span class="line">        <span class="comment">//如果n-k&gt;pivotIndex，则在pivotIndex的右边递归查找</span></span><br><span class="line">        <span class="keyword">if</span>(n - k &lt; pivotIndex)&#123;</span><br><span class="line">            <span class="title function_">quick</span>(l, pivotIndex - <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">quick</span>(pivotIndex + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">quick</span>(<span class="number">0</span>, n - <span class="number">1</span>);<span class="comment">//函数开始传入的left=0，right= n - 1</span></span><br><span class="line">    <span class="keyword">return</span> nums[n - k]; <span class="comment">//最后找到了正确的位置 也就是n-k等于pivotIndex 这个位置的元素就是第k大的数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">nums, left, right</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = nums[right];             <span class="comment">//最右边的元素为基准</span></span><br><span class="line">    <span class="keyword">let</span> pivotIndex = left;               <span class="comment">//pivotIndex初始化为left</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = left; i &lt; right; i++)&#123; <span class="comment">//遍历left到right-1的元素</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i] &lt; pivot)&#123;             <span class="comment">//如果当前元素比基准元素小</span></span><br><span class="line">            <span class="title function_">swap</span>(nums, i, pivotIndex);       <span class="comment">//把它交换到pivotIndex的位置</span></span><br><span class="line">            pivotIndex++;                    <span class="comment">//pivotIndex往前移动一步</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">swap</span>(nums, right, pivotIndex);       <span class="comment">//最后交换pivotIndex和right</span></span><br><span class="line">    <span class="keyword">return</span> pivotIndex;                   <span class="comment">//返回pivotIndex</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">nums, p, q</span>)&#123;<span class="comment">//交换数组中的两个元素</span></span><br><span class="line">    <span class="keyword">const</span> temp = nums[p];</span><br><span class="line">    nums[p] = nums[q];</span><br><span class="line">    nums[q] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>时间复杂度<code>O(nlogn)</code></li><li>空间复杂度<code>O(logn)</code>，递归的深度</li></ul><h2 id="二、寻找和为定值的多个数"><a href="#二、寻找和为定值的多个数" class="headerlink" title="二、寻找和为定值的多个数"></a>二、寻找和为定值的多个数</h2><p><strong>描述：</strong></p><p> 输入两个整数n和sum，从数列1，2，3…….n 中随意取几个数，使其和等于sum，要求将其中所有的可能组合列出来。 </p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SumOfNumber</span>(<span class="params">sum,n</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="title function_">fn</span>(sum,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">sum,n</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span> || sum &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sum === n)&#123;</span><br><span class="line">            <span class="keyword">let</span> arr = res.<span class="title function_">slice</span>().<span class="title function_">reverse</span>();</span><br><span class="line">            arr.<span class="title function_">push</span>(n);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">push</span>(n);</span><br><span class="line">        <span class="title function_">fn</span>(sum - n,n - <span class="number">1</span>);</span><br><span class="line">        res.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="title function_">fn</span>(sum,n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、二分查找"><a href="#三、二分查找" class="headerlink" title="三、二分查找"></a>三、二分查找</h2><p>使用二分查找，求平方根。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mySqrt</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right = x</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>)<span class="comment">//中间位置索引 x&gt;&gt;1 表示除以2并取整，缩小一下遍历的范围</span></span><br><span class="line">        <span class="keyword">if</span>(mid * mid &lt;= x)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【烧脑算法】数据结构(二)</title>
      <link href="/posts/628409672/"/>
      <url>/posts/628409672/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="一、遍历二叉树"><a href="#一、遍历二叉树" class="headerlink" title="一、遍历二叉树"></a>一、遍历二叉树</h2><h3 id="1、深度优先搜索"><a href="#1、深度优先搜索" class="headerlink" title="1、深度优先搜索"></a>1、深度优先搜索</h3><h4 id="1-前序遍历"><a href="#1-前序遍历" class="headerlink" title="(1)前序遍历"></a>(1)前序遍历</h4><p><strong>根 -&gt; 左子节点 -&gt; 右子节点</strong></p><ul><li>递归</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DLR</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)  <span class="keyword">return</span> [];</span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        result.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">left</span>, result);</span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">right</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="title function_">fn</span>(root);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>栈</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DLR</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">if</span>(root) stack.<span class="title function_">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> n = stack.<span class="title function_">pop</span>();</span><br><span class="line">        res.<span class="title function_">push</span>(n.<span class="property">val</span>);</span><br><span class="line">        <span class="keyword">if</span>(n.<span class="property">right</span>) stack.<span class="title function_">push</span>(n.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">if</span>(n.<span class="property">left</span>) stack.<span class="title function_">push</span>(n.<span class="property">left</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="(2)中序遍历"></a>(2)中序遍历</h4><p><strong>左子节点 -&gt; 根 -&gt; 右子节点</strong></p><ul><li>递归</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LDR</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">root</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">left</span>);</span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>栈</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">LDR</span>(<span class="params">root</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">const</span> result = [];<span class="comment">//最终的结果</span></span><br><span class="line">    <span class="keyword">while</span>(root || stack.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 先把当前节点的左节点入栈，及root.left，root.left.left，......</span></span><br><span class="line">        <span class="keyword">while</span>(root)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(root);</span><br><span class="line">            root = root.<span class="property">left</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root = stack.<span class="title function_">pop</span>();</span><br><span class="line">        result.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">        root = root.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-后序遍历"><a href="#3-后序遍历" class="headerlink" title="(3)后序遍历"></a>(3)后序遍历</h4><p><strong>左子节点 -&gt; 右子节点 -&gt; 根</strong></p><ul><li>递归</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LRD</span>(<span class="params">root</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">root</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">left</span>);</span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">right</span>);</span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fn</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>栈</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LRD</span>(<span class="params">root</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">const</span> arr = [root];</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">while</span>(arr.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> n = arr.<span class="title function_">pop</span>();</span><br><span class="line">        res.<span class="title function_">unshift</span>(n.<span class="property">val</span>);</span><br><span class="line">        n.<span class="property">left</span> &amp;&amp; arr.<span class="title function_">push</span>(n.<span class="property">left</span>);</span><br><span class="line">        n.<span class="property">right</span> &amp;&amp; arr.<span class="title function_">push</span>(n.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、广度优先搜索"><a href="#2、广度优先搜索" class="headerlink" title="2、广度优先搜索"></a>2、广度优先搜索</h3><h4 id="1-层序遍历"><a href="#1-层序遍历" class="headerlink" title="(1)层序遍历"></a>(1)层序遍历</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">BFS</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> res= []; </span><br><span class="line">    <span class="keyword">let</span> arr =[root]; </span><br><span class="line">    <span class="keyword">while</span>(arr.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> p= arr.<span class="title function_">shift</span>();  </span><br><span class="line">        res.<span class="title function_">push</span>(p.<span class="property">val</span>);</span><br><span class="line">        <span class="keyword">if</span>(p.<span class="property">left</span>)  arr.<span class="title function_">push</span>(p.<span class="property">left</span>); </span><br><span class="line">        <span class="keyword">if</span>(p.<span class="property">right</span>)  arr.<span class="title function_">push</span>(p.<span class="property">right</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、二叉树的深度"><a href="#二、二叉树的深度" class="headerlink" title="二、二叉树的深度"></a>二、二叉树的深度</h2><h3 id="1、DFS-递归"><a href="#1、DFS-递归" class="headerlink" title="1、DFS+递归"></a>1、DFS+递归</h3><p>后序遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxDepth</span>(<span class="params">root</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">maxDepth</span>(root.<span class="property">left</span>), <span class="title function_">maxDepth</span>(root.<span class="property">right</span>)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、DFS-回溯"><a href="#2、DFS-回溯" class="headerlink" title="2、DFS+回溯"></a>2、DFS+回溯</h3><p>先序遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxDepth</span>(<span class="params">root</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> deep = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">  <span class="title function_">dfs</span>(root);</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">    deep++;</span><br><span class="line">    <span class="keyword">if</span>(deep &gt; max) max = deep;</span><br><span class="line">    <span class="title function_">dfs</span>(root.<span class="property">left</span>);</span><br><span class="line">    <span class="title function_">dfs</span>(root.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    deep--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、BFS"><a href="#3、BFS" class="headerlink" title="3、BFS"></a>3、BFS</h3><p>层序遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxDepth</span>(<span class="params">root</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> queue = [root];</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(queue.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; queue.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(queue[i].<span class="property">left</span>) tmp.<span class="title function_">push</span>(queue[i].<span class="property">left</span>);</span><br><span class="line">      <span class="keyword">if</span>(queue[i].<span class="property">right</span>) tmp.<span class="title function_">push</span>(queue[i].<span class="property">right</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    queue = tmp;</span><br><span class="line">    res++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、反转二叉树"><a href="#三、反转二叉树" class="headerlink" title="三、反转二叉树"></a>三、反转二叉树</h2><h3 id="1、递归"><a href="#1、递归" class="headerlink" title="1、递归"></a>1、递归</h3><p><strong>思路：</strong></p><p>从根节点开始，递归地对树进行遍历，并从叶子节点先开始翻转。如果当前遍历到的节点 <code>root</code> 的左右两棵子树都已经翻转，那么我们只需要交换两棵子树的位置，即可完成以 <code>root</code> 为根节点的整棵子树的翻转。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">invertTree</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> left = <span class="title function_">invertTree</span>(root.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> right = <span class="title function_">invertTree</span>(root.<span class="property">right</span>);</span><br><span class="line">    root.<span class="property">left</span> = right;</span><br><span class="line">    root.<span class="property">right</span> = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>时间复杂度：O(N)，其中 N为二叉树节点的数目。 </li><li>空间复杂度：O(N)。使用的空间由递归栈的深度决定，它等于当前节点在二叉树中的高度。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【烧脑算法】数据结构(一)</title>
      <link href="/posts/2319801898/"/>
      <url>/posts/2319801898/</url>
      
        <content type="html"><![CDATA[<h1 id="一、斐波那契数列"><a href="#一、斐波那契数列" class="headerlink" title="一、斐波那契数列"></a>一、斐波那契数列</h1><p><strong>描述：</strong></p><p>斐波那契数的边界条件是 <code>F(0)=0 </code> 和 <code>F(1)=1</code>。当 <code>n&gt;1</code> 时，每一项的和都等于前两项的和，因此有如下递推关系：</p><ul><li><code>F(n)=F(n-1)+F(n-2)</code></li></ul><h2 id="1、简单递归"><a href="#1、简单递归" class="headerlink" title="1、简单递归"></a>1、简单递归</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>)<span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fib</span>(n-<span class="number">1</span>) + <span class="title function_">fib</span>(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、动态规划"><a href="#2、动态规划" class="headerlink" title="2、动态规划"></a>2、动态规划</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        p = q;</span><br><span class="line">        q = r;</span><br><span class="line">        r = p + q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(1)。</li></ul><h1 id="二、合并两个排序的链表"><a href="#二、合并两个排序的链表" class="headerlink" title="二、合并两个排序的链表"></a>二、合并两个排序的链表</h1><h2 id="1、递归"><a href="#1、递归" class="headerlink" title="1、递归"></a>1、递归</h2><p><strong>思路：</strong></p><p> 递归地定义两个链表里的 <code>merge</code> 操作 ， 也就是说，两个链表头部值较小的一个节点与剩下元素的 <code>merge</code> 操作结果合并。 </p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeTwoLists</span>(<span class="params">l1, l2</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l2 === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l1.<span class="property">val</span> &lt; l2.<span class="property">val</span>)&#123;</span><br><span class="line">        l1.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1.<span class="property">next</span>, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        l2.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1, l2.<span class="property">next</span>);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>行性能分析：</strong></p><ul><li>时间复杂度：O(n+m)，其中n和m分别为两个链表的长度。</li><li>空间复杂度：O(n+m)，其中n和m分别为两个链表的长度。</li></ul><h2 id="2、迭代"><a href="#2、迭代" class="headerlink" title="2、迭代"></a>2、迭代</h2><p><strong>思路：</strong></p><p>当 <code>l1</code> 和 <code>l2</code> 都不是空链表时，判断 <code>l1</code> 和 <code>l2</code> 哪一个链表的头节点的值更小，将较小值的节点添加到结果里，当一个节点被添加到结果里之后，将对应链表中的节点向后移一位。重复步骤。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeTwoLists</span>(<span class="params">l1, l2</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> prehead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);<span class="comment">//新建一个空链表用来当作被合并的链表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> prev = prehead;<span class="comment">//指针</span></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1.<span class="property">val</span> &lt;= l2.<span class="property">val</span>)&#123;</span><br><span class="line">            prev.<span class="property">next</span> = l1;</span><br><span class="line">            l1 = l1.<span class="property">next</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            prev.<span class="property">next</span> = l2;</span><br><span class="line">            l2 = l2.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = prev.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span></span><br><span class="line">    prev.<span class="property">next</span> = l1 === <span class="literal">null</span> ? l2 : l1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> prehead.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>时间复杂度：O(n+m)，其中n和m分别为两个链表的长度。</li><li>空间复杂度：O(1)，我们只需要常数的空间存放若干变量。</li></ul><h1 id="三、反转链表"><a href="#三、反转链表" class="headerlink" title="三、反转链表"></a>三、反转链表</h1><h2 id="1、迭代"><a href="#1、迭代" class="headerlink" title="1、迭代"></a>1、迭代</h2><p><strong>思路：</strong></p><p>在遍历链表时，将当前节点的 <code>next</code> 指针改为指向前一个节点。由于节点没有引用其前一个节点，因此必须事先存储其前一个节点。在更改引用之前，还需要存储后一个节点。最后返回新的头引用。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseList</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> curr = list;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        <span class="keyword">const</span> next = curr.<span class="property">next</span>;</span><br><span class="line">        curr.<span class="property">next</span> = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>时间复杂度：O(n) ，其中 n 是链表的长度。需要遍历链表一次。 </li><li>空间复杂度：O(1)。</li></ul><h2 id="2、递归"><a href="#2、递归" class="headerlink" title="2、递归"></a>2、递归</h2><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseList</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list === <span class="literal">null</span> || list.<span class="property">next</span> === <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> newList = <span class="title function_">reverseList</span>(list.<span class="property">next</span>);</span><br><span class="line">    list.<span class="property">next</span>.<span class="property">next</span> = list;</span><br><span class="line">    list.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="四、链表有环"><a href="#四、链表有环" class="headerlink" title="四、链表有环"></a>四、链表有环</h1><h2 id="1、快慢指针"><a href="#1、快慢指针" class="headerlink" title="1、快慢指针"></a>1、快慢指针</h2><p><strong>思路：</strong></p><p>我们定义两个指针，一快一满。慢指针每次只移动一步，而快指针每次移动两步。初始时，慢指针在位置 <code>head</code>，而快指针在位置 <code>head.next</code>。这样一来，如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表。否则快指针将到达链表尾部，该链表不为环形链表。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hasCycle</span>(<span class="params">list</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(list === <span class="literal">null</span> || list.<span class="property">next</span> === <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> slow = list;</span><br><span class="line">    <span class="keyword">let</span> fast = list.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">while</span>(slow != fast)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fast === <span class="literal">null</span> || fast.<span class="property">next</span> === <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>时间复杂度：O(N)，其中 N 是链表中的节点数。 </li><li>空间复杂度：O(1)。我们只使用了两个指针的额外空间。</li></ul><h1 id="五、判断括号字符串是否有效"><a href="#五、判断括号字符串是否有效" class="headerlink" title="五、判断括号字符串是否有效"></a>五、判断括号字符串是否有效</h1><p><strong>描述：</strong></p><p>给定一个只包含三种字符的字符串：<code>(</code>，<code>)</code> 和 <code>*</code>，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：</p><ul><li>任何左括号 <code>(</code> 必须有相应的右括号 <code>)</code>。</li><li>任何右括号 <code>)</code> 必须有相应的左括号 <code>(</code> 。</li><li>左括号 <code>(</code> 必须在对应的右括号之前 <code>)</code>。</li><li><code>*</code>可以被视为单个右括号 <code>)</code> ，或单个左括号 <code>(</code> ，或一个空字符串。</li><li>一个空字符串也被视为有效字符串。</li></ul><h2 id="1、栈"><a href="#1、栈" class="headerlink" title="1、栈"></a>1、栈</h2><p><strong>思路：</strong></p><p>分别使用两个栈储存<code>*</code>和 <code>(</code> [<strong>注：</strong>存储的是字符在字符串里的索引]。遍历字符串，当遇到<code>*</code>和 <code>(</code> 时，分别将其存储到相应的栈里，当遇到 <code>)</code>  时，先于 <code>(</code> 栈中的 <code>(</code> 进行抵消，若 <code>(</code> 栈为空，则与<code>*</code>栈中的<code>*</code>进行抵消，若<code>*</code> 栈也为空，则返回 <code>false</code> 。若成功遍历完字符串，最后将 <code>(</code> 栈和 <code>*</code>栈进行出战操作，比较两个栈的栈尾元素大小，若 <code>(</code> 栈尾元素 大于 <code>*</code>栈尾元素，则返回 <code>false</code>，直到遍历完两个栈，最后返回 <code>(</code> 的长度是否等于 0。</p><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkValidString</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> leftStack = [];</span><br><span class="line">    <span class="keyword">const</span> asteriskStack = [];</span><br><span class="line">    <span class="keyword">const</span> n = str.<span class="property">length</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> c = str[i];</span><br><span class="line">        <span class="keyword">if</span>(c === <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            leftStack.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c === <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">            asteriskStack.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(leftStack.<span class="property">length</span>)&#123;</span><br><span class="line">                leftStack.<span class="title function_">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(asteriskStack.<span class="property">length</span>)&#123;</span><br><span class="line">                asteriskStack.<span class="title function_">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(leftStack.<span class="property">length</span> &amp;&amp; asteriskStack.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> leftIndex = leftStack.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">const</span> asteriskIndex = asteriskStack.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (leftIndex &gt; asteriskIndex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> leftStack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>时间复杂度：O(n)，其中 n 是字符串 s的长度。 </li><li>空间复杂度：O(n)，其中 n 是字符串 s 的长度。</li></ul><h2 id="2、贪心算法"><a href="#2、贪心算法" class="headerlink" title="2、贪心算法"></a>2、贪心算法</h2><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkValidString</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> minCount = <span class="number">0</span>, maxCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> n = str.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> c = str[i];</span><br><span class="line">        <span class="keyword">if</span>(c === <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            minCount++;</span><br><span class="line">            maxCount++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c === <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            minCount = <span class="title class_">Math</span>.<span class="title function_">max</span>(minCount - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            maxCount--;</span><br><span class="line">            <span class="keyword">if</span>(maxCount &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            minCount = <span class="title class_">Math</span>.<span class="title function_">max</span>(minCount - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            maxCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCount === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>时间复杂度：O(n)，其中 n 是字符串 s 的长度。 </li><li>空间复杂度：O(1)。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaScript】JS编程(一)</title>
      <link href="/posts/1946064795/"/>
      <url>/posts/1946064795/</url>
      
        <content type="html"><![CDATA[<h1 id="一、实现深拷贝"><a href="#一、实现深拷贝" class="headerlink" title="一、实现深拷贝"></a>一、实现深拷贝</h1><h2 id="1、深拷贝与浅拷贝的定义"><a href="#1、深拷贝与浅拷贝的定义" class="headerlink" title="1、深拷贝与浅拷贝的定义"></a>1、深拷贝与浅拷贝的定义</h2><blockquote><p>浅拷贝：对基本数据类型，拷贝其值；对引用数据类型，拷贝其内存地址，新旧对象会相互影响。</p><p>深拷贝：将一个对象从内存中完整的拷贝一份出来，开辟一块新的内存存放新的对象，且新旧对象不会互相影响。</p></blockquote><h2 id="2、封装数据类型判断"><a href="#2、封装数据类型判断" class="headerlink" title="2、封装数据类型判断"></a>2、封装数据类型判断</h2><p><code>Types.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可遍历数据类型</span></span><br><span class="line"><span class="keyword">const</span> objectTag = <span class="string">&#x27;[object Object]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> arrayTag = <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> mapTag = <span class="string">&#x27;[object Map]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> setTag = <span class="string">&#x27;[object Set]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> argsTag = <span class="string">&#x27;[object Arguments]&#x27;</span>;</span><br><span class="line"><span class="comment">//不可遍历数据类型</span></span><br><span class="line"><span class="keyword">const</span> numberTag = <span class="string">&#x27;[object Number]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> stringTag = <span class="string">&#x27;[object String]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> boolTag = <span class="string">&#x27;[object Boolean]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> symbolTag = <span class="string">&#x27;[object Symbol]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> undTag = <span class="string">&#x27;[object Undefined]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> nullTag = <span class="string">&#x27;[object Null]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> funTag = <span class="string">&#x27;[object Function]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> dateTag = <span class="string">&#x27;[object Date]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> errorTag = <span class="string">&#x27;[object Error]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regexpTag = <span class="string">&#x27;[object RegExp]&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deepTag = [mapTag, setTag, arrayTag, objectTag, argsTag];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> lightTag = [boolTag, dateTag, errorTag, numberTag, regexpTag, stringTag, symbolTag, undTag, nullTag, funTag];</span><br><span class="line"><span class="comment">//判断是否为对象类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> type = <span class="keyword">typeof</span> target;</span><br><span class="line">    <span class="keyword">return</span> target !== <span class="literal">null</span> &amp;&amp; (type === <span class="string">&#x27;object&#x27;</span> || type === <span class="string">&#x27;function&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断具体类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">getType,isObject,deepTag,lightTag,objectTag,arrayTag,mapTag,setTag,argsTag,numberTag,stringTag,boolTag,symbolTag,undTag,</span><br><span class="line">nullTag,funTag,dateTag,errorTag,regexpTag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、基础版"><a href="#3、基础版" class="headerlink" title="3、基础版"></a>3、基础版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types,&#123;deepTag, isObject, getType&#125; <span class="keyword">from</span> <span class="string">&#x27;./Types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> type = <span class="title function_">getType</span>(target);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">isObject</span>(target) || (type === <span class="title class_">Types</span>.<span class="property">objectTag</span> || type === <span class="title class_">Types</span>.<span class="property">arrayTag</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(target));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;clone只支持克隆基本数据对象、数组、object&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这种写法非常简单，而且可以应对大部分的应用场景，但是它还是有很大缺陷的，比如拷贝其他引用类型、拷贝函数、循环引用等情况。 </p><h2 id="4、拷贝函数"><a href="#4、拷贝函数" class="headerlink" title="4、拷贝函数"></a>4、拷贝函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cloneFunction</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bodyReg = <span class="regexp">/(?&lt;=&#123;)(.|\n)+(?=&#125;)/m</span>;</span><br><span class="line">    <span class="keyword">const</span> paramReg = <span class="regexp">/(?&lt;=\().+(?=\)\s+&#123;)/</span>;</span><br><span class="line">    <span class="keyword">const</span> funcString = func.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span> (func.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> param = paramReg.<span class="title function_">exec</span>(funcString);</span><br><span class="line">        <span class="keyword">const</span> body = bodyReg.<span class="title function_">exec</span>(funcString);</span><br><span class="line">        <span class="keyword">if</span> (body) &#123;</span><br><span class="line">            <span class="keyword">if</span> (param) &#123;</span><br><span class="line">                <span class="keyword">const</span> paramArr = param[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(...paramArr, body[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(body[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>(funcString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、最终版"><a href="#5、最终版" class="headerlink" title="5、最终版"></a>5、最终版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types,&#123;deepTag, isObject, getType&#125; <span class="keyword">from</span> <span class="string">&#x27;./Types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用while循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">forEach</span>(<span class="params">array, iteratee</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> length = array.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span>(++index &lt; length)&#123;</span><br><span class="line">        <span class="title function_">iteratee</span>(array[index], index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化克隆对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInit</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Ctor</span> = target.<span class="property">constructor</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Ctor</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//克隆Symbol</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cloneSymbol</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>(<span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span>.<span class="title function_">call</span>(target));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//克隆正则</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cloneReg</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reFlags = <span class="regexp">/\w*$/</span>;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">new</span> target.<span class="title function_">constructor</span>(<span class="params">target.source, reFlags.exec(target)</span>);</span><br><span class="line">    result.<span class="property">lastIndex</span> = target.<span class="property">lastIndex</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//克隆不可遍历对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cloneOtherType</span>(<span class="params">target, type</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Ctor</span> = target.<span class="property">constructor</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> types.<span class="property">boolTag</span>:</span><br><span class="line">        <span class="keyword">case</span> types.<span class="property">numberTag</span>:</span><br><span class="line">        <span class="keyword">case</span> types.<span class="property">stringTag</span>:</span><br><span class="line">        <span class="keyword">case</span> types.<span class="property">errorTag</span>:</span><br><span class="line">        <span class="keyword">case</span> types.<span class="property">dateTag</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Ctor</span>(target);</span><br><span class="line">        <span class="keyword">case</span> types.<span class="property">regexpTag</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">cloneReg</span>(target);</span><br><span class="line">        <span class="keyword">case</span> types.<span class="property">symbolTag</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">cloneSymbol</span>(target);</span><br><span class="line">        <span class="keyword">case</span> types.<span class="property">funTag</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">cloneFun</span>(target);</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全面克隆</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cloneLast</span>(<span class="params">target, map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">isObject</span>(target))&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> type = <span class="title function_">getType</span>(target);</span><br><span class="line">    <span class="keyword">let</span> cloneTarget;</span><br><span class="line">    <span class="keyword">if</span>(deepTag.<span class="title function_">includes</span>(type))&#123;</span><br><span class="line">        cloneTarget = <span class="title function_">getInit</span>(target, type);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">cloneOtherType</span>(target, type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.<span class="title function_">get</span>(target))&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    map.<span class="title function_">set</span>(target,cloneTarget);</span><br><span class="line">    <span class="keyword">if</span>(type === types.<span class="property">setTag</span>)&#123;</span><br><span class="line">        target.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">            cloneTarget.<span class="title function_">add</span>(<span class="title function_">cloneLast</span>(value));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(type === types.<span class="property">mapTag</span>)&#123;</span><br><span class="line">        target.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>)=&gt;</span>&#123;</span><br><span class="line">            cloneTarget.<span class="title function_">set</span>(key, <span class="title function_">cloneLast</span>(value));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> keys = (type === types.<span class="property">arrayTag</span>) ? <span class="literal">undefined</span> : <span class="title class_">Object</span>.<span class="title function_">keys</span>(target);</span><br><span class="line">    <span class="title function_">forEach</span>(keys || target, <span class="function">(<span class="params">value, key</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(keys)&#123;</span><br><span class="line">            key = value;</span><br><span class="line">        &#125;</span><br><span class="line">        cloneTarget[key] = <span class="title function_">cloneLast</span>(target[key], map);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> cloneTarget;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路：</strong> 首先判断是基本数据类型还是引用数据类型，是基本数据类型直接返回值；是引用数据类型再判断是可循环还是不可循环，不可循环则将数据交由对应克隆函数拷贝（利用其原型构造函数或其他方式进行拷贝）然后返回拷贝数据；是可循环数据，需判断是否已拷贝过，所以引入<code>WeakMap</code>将已拷贝的数据保存在其中，在拷贝时利用<code>WeakMap</code>判断数据是否已拷贝过；再对<code>map</code>和<code>set</code> 两个数据类型进行循环拷贝，最后是数组和对象的循环拷贝，将拷贝后的数据返回。</p><h1 id="二、大数相加"><a href="#二、大数相加" class="headerlink" title="二、大数相加"></a>二、大数相加</h1><p>当数字超出精度范围时，利用字符串表示数据进行计算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = args.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> result = args[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//多个大数相加</span></span><br><span class="line">    <span class="keyword">while</span>(++index &lt; length)&#123;</span><br><span class="line">        <span class="comment">//-------两个大数相加具体实现</span></span><br><span class="line">        <span class="keyword">let</span> item = args[index];</span><br><span class="line">        <span class="comment">// 取两数最大长度</span></span><br><span class="line">        <span class="keyword">let</span> maxLength = <span class="title class_">Math</span>.<span class="title function_">max</span>(result.<span class="property">length</span>, item.<span class="property">length</span>);</span><br><span class="line">        <span class="comment">// 用0补齐长度</span></span><br><span class="line">        result = result.<span class="title function_">padStart</span>(maxLength, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">        item = item.<span class="title function_">padStart</span>(maxLength, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义加法过程需要的变量</span></span><br><span class="line">        <span class="keyword">let</span> t = <span class="number">0</span>;  <span class="comment">//中间变量</span></span><br><span class="line">        <span class="keyword">let</span> f = <span class="number">0</span>;  <span class="comment">//进位</span></span><br><span class="line">        <span class="keyword">let</span> sum = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = maxLength - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --)&#123;</span><br><span class="line">            t = <span class="built_in">parseInt</span>(result[i]) + <span class="built_in">parseInt</span>(item[i]) + f;</span><br><span class="line">            f = <span class="title class_">Math</span>.<span class="title function_">floor</span>(t/<span class="number">10</span>);</span><br><span class="line">            sum = t%<span class="number">10</span> + sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f === <span class="number">1</span>)&#123;</span><br><span class="line">            result = <span class="string">&quot;1&quot;</span> + sum;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//-------</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、反转字符串"><a href="#三、反转字符串" class="headerlink" title="三、反转字符串"></a>三、反转字符串</h1><p><strong>方法：</strong> 双指针</p><p><strong>思路：</strong> 使用双指针，<code>left</code>和<code>right</code>：</p><ul><li>​将<code>left</code>指向字符串数组首元素，<code>right</code>指向字符串数组尾元素。</li><li>当 <code>left &lt; right </code>时，交换 <code>str[left]</code> 和 <code>str[right]</code>，<code>left</code> 指针右移一位，<code>right</code> 指针左移一位。</li><li>当 <code>left &gt;= right</code>，反转结束，返回字符串数组。</li></ul><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseStr</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> len = str.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> left = <span class="number">0</span>;right = len-<span class="number">1</span>;left &lt; right; ++left,--right)&#123;</span><br><span class="line">        [str[left],str[right]] = [str[right],str[left]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>实践复杂度：O(N)，其中N为字符数组长度。一共执行了N&#x2F;2次的交换。</li><li>空间复杂度：O(1)，全程为申请额外的空间。</li></ul><h1 id="四、数组去重"><a href="#四、数组去重" class="headerlink" title="四、数组去重"></a>四、数组去重</h1><h2 id="1、双层循环去重"><a href="#1、双层循环去重" class="headerlink" title="1、双层循环去重"></a>1、双层循环去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="comment">// res用来存储结果</span></span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ;len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, resLen = res.<span class="property">length</span>; j &lt; resLen; j++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === res[j]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果array[i]是唯一的，那么执行完循环，j等于resLen</span></span><br><span class="line">        <span class="keyword">if</span> (j === resLen) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(array)); <span class="comment">// [1, &quot;1&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>优化：</strong></p><p>使用<code>indexOf</code>简化内层循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(current) === -<span class="number">1</span>) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(current)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(array));</span><br></pre></td></tr></table></figure><h2 id="2、使用-filter-indexOf-进行去重"><a href="#2、使用-filter-indexOf-进行去重" class="headerlink" title="2、使用 filter + indexOf 进行去重"></a>2、使用 <code>filter + indexOf</code> 进行去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> array.<span class="title function_">indexOf</span>(item) === index;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(array));</span><br></pre></td></tr></table></figure><h2 id="3、使用键值对去重"><a href="#3、使用键值对去重" class="headerlink" title="3、使用键值对去重"></a>3、使用键值对去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [&#123;<span class="attr">value</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">value</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item)) </span><br><span class="line">            ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item)] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(array)); <span class="comment">// [&#123;value: 1&#125;, &#123;value: 2&#125;]</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong>  考虑到 <code>JSON.stringify</code> 任何一个正则表达式的结果都是 <code>&#123;&#125;</code>，所以这个方法并不适用于处理正则表达式去重。 </p><h2 id="4、ES6"><a href="#4、ES6" class="headerlink" title="4、ES6"></a>4、<code>ES6</code></h2><p>使用<code>ES6</code>提供的<code>Set</code>和<code>Map</code>数据结构进行去重。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">array</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(array)); <span class="comment">// [1, 2, &quot;1&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(array)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">unique</span> = (<span class="params">a</span>) =&gt; [...<span class="keyword">new</span> <span class="title class_">Set</span>(a)];</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Map</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (arr) &#123;</span><br><span class="line">    <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">a</span>) =&gt;</span> !seen.<span class="title function_">has</span>(a) &amp;&amp; seen.<span class="title function_">set</span>(a, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、实现千分位隔符"><a href="#五、实现千分位隔符" class="headerlink" title="五、实现千分位隔符"></a>五、实现千分位隔符</h1><h2 id="1、toLocaleString"><a href="#1、toLocaleString" class="headerlink" title="1、toLocaleString"></a>1、<code>toLocaleString</code></h2><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numObj.<span class="title function_">toLocaleString</span>([locales [, options]])</span><br></pre></td></tr></table></figure><h2 id="2、正则表达式和replace"><a href="#2、正则表达式和replace" class="headerlink" title="2、正则表达式和replace"></a>2、正则表达式和<code>replace</code></h2><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">replace</span>(regexp|substr, newSubStr|<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">numFormat</span>(<span class="params">num</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/\d+/</span>, <span class="keyword">function</span>(<span class="params">n</span>)&#123; <span class="comment">// 先提取整数部分</span></span><br><span class="line">       <span class="keyword">return</span> n.<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>,<span class="keyword">function</span>(<span class="params">$<span class="number">1</span></span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> $<span class="number">1</span>+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">1234567894532</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numFormat</span>(a)); <span class="comment">// &quot;1,234,567,894,532&quot;</span></span><br></pre></td></tr></table></figure><h1 id="六、判断回文数"><a href="#六、判断回文数" class="headerlink" title="六、判断回文数"></a>六、判断回文数</h1><p><strong>思路：</strong></p><ul><li>临界情况，所有负数都不可能是回文 。</li><li>除了 <code>0</code> 以外，所有个位是 <code>0</code> 的数字不可能是回文 。</li><li>比较前半段和(反转)后半段是否相等。</li></ul><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPalindrome</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> num !== <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;isPalindrome参数为number类型.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span> || (num % <span class="number">10</span> === <span class="number">0</span> &amp;&amp; num !== <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> revertedNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num &gt; revertedNumber) &#123;</span><br><span class="line">        revertedNumber = revertedNumber * <span class="number">10</span> + num % <span class="number">10</span>;</span><br><span class="line">        num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(num / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num === revertedNumber || num === <span class="title class_">Math</span>.<span class="title function_">floor</span>(revertedNumber / <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>时间复杂度：O(log n)，对于每次迭代， 我们会将输入除以 10，因此时间复杂度为 O(log n)。 </li><li>空间复杂度：O(1)。我们只需要常数空间存放若干变量。</li></ul><h1 id="七、判断素数"><a href="#七、判断素数" class="headerlink" title="七、判断素数"></a>七、判断素数</h1><h2 id="1、简洁版"><a href="#1、简洁版" class="headerlink" title="1、简洁版"></a>1、简洁版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = num - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">2</span>;i &lt;= tmp;i++)</span><br><span class="line">      <span class="keyword">if</span>(num%i == <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、进阶版"><a href="#2、进阶版" class="headerlink" title="2、进阶版"></a>2、进阶版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">num</span>)&#123;</span><br><span class="line">     <span class="keyword">let</span> tmp = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(num);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>;i &lt;= tmp;i++)</span><br><span class="line">        <span class="keyword">if</span>(num%i == <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、质变版"><a href="#3、质变版" class="headerlink" title="3、质变版"></a>3、质变版</h2><p><strong>思路：</strong></p><ul><li>大于等于5的质数一定和6的倍数相邻。</li></ul><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> num !== <span class="string">&quot;number&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;isPrime参数错误，isPrime(number).&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个较小数另外处理</span></span><br><span class="line">    <span class="keyword">if</span>(num ===<span class="number">2</span>|| num===<span class="number">3</span> ) <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">    <span class="comment">//不在6的倍数两侧的一定不是质数</span></span><br><span class="line">    <span class="keyword">if</span>(num%<span class="number">6</span> !== <span class="number">1</span> &amp;&amp; num%<span class="number">6</span> !== <span class="number">5</span>) <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tmp =<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(num);</span><br><span class="line">    <span class="comment">//在6的倍数两侧的也可能不是质数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">5</span>;i &lt;= tmp;i += <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num%i === <span class="number">0</span> || num%(i + <span class="number">2</span>) === <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排除所有，剩余的是质数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaScript】JS数组API</title>
      <link href="/posts/3388256348/"/>
      <url>/posts/3388256348/</url>
      
        <content type="html"><![CDATA[<h1 id="一、ES5数组API"><a href="#一、ES5数组API" class="headerlink" title="一、ES5数组API"></a>一、ES5数组API</h1><h2 id="1、constructor"><a href="#1、constructor" class="headerlink" title="1、constructor"></a>1、constructor</h2><blockquote><p> 返回数组的构造函数  </p><p>其返回值是对函数的引用，而不是函数的名称：</p><p>对于 JavaScript 数组，constructor 属性返回：<br><strong>function Array() { [native code] }</strong></p><p>对于 JavaScript 对象，constructor 属性返回：<br><strong>function Object() { [native code] }</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.<span class="property">constructor</span>;</span><br><span class="line"><span class="comment">// 返回 function Array() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="2、length"><a href="#2、length" class="headerlink" title="2、length"></a>2、length</h2><blockquote><p> 设置或返回数组中元素的数量。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><h2 id="3、prototype"><a href="#3、prototype" class="headerlink" title="3、prototype"></a>3、prototype</h2><blockquote><p> 允许您向数组添加属性和方法。 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加属性或方法</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newMethod</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数组，并调用方法</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">newMethod</span>();</span><br></pre></td></tr></table></figure><h2 id="4、concat"><a href="#4、concat" class="headerlink" title="4、concat"></a>4、concat</h2><blockquote><p> 连接两个或多个数组，并返回已连接数组的副本。 </p><p> 方法不会更改现有数组，而是返回一个新数组，其中包含已连接数组的值 .</p><p><strong>语法：</strong>array1.concat(array2 [, array3, …, arrayX])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr1.<span class="title function_">concat</span>(arr2);</span><br><span class="line"><span class="comment">//newArr = [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h2 id="5、every"><a href="#5、every" class="headerlink" title="5、every"></a>5、every</h2><blockquote><p> 检查数组中的每个元素是否通过测试。 </p><p> 方法对数组中存在的每个元素执行一次函数 。</p><p>所有元素通过测试，enery()返回true，否则返回false。</p><p><strong>注:</strong>  不对没有值的数组元素执行函数。 </p><p><strong>语法：</strong> array.every(function(currentValue, index, arr) [, thisValue])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bool = arr.<span class="title function_">every</span>(fn);</span><br><span class="line"><span class="comment">//bool = false;</span></span><br></pre></td></tr></table></figure><h2 id="6、filter"><a href="#6、filter" class="headerlink" title="6、filter"></a>6、filter</h2><blockquote><p> 使用数组中通过测试的每个元素创建新数组。 </p><p><strong>注：</strong> 不会对没有值的数组元素执行该函数。 </p><p><strong>语法：</strong> array.filter(function(currentValue, index, arr) [, thisValue])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>)&#123;</span><br><span class="line">reurn num &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(fn);</span><br><span class="line"><span class="comment">//newArr = [2,3];</span></span><br></pre></td></tr></table></figure><h2 id="7、forEach"><a href="#7、forEach" class="headerlink" title="7、forEach"></a>7、forEach</h2><blockquote><p> 按顺序为每个数组元素调用一次函数。 </p><p><strong>注：</strong>  对于没有值的数组元素，不执行<code>forEach()</code> 方法。 </p><p><strong>语法：</strong> array.forEach(function(currentValue, index, arr) [, thisValue])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">item,index,arr</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item + <span class="string">&quot;&amp;&quot;</span> + index);</span><br><span class="line">&#125;</span><br><span class="line">arr.<span class="title function_">forEach</span>(fn);</span><br><span class="line"><span class="comment">//打印 1&amp;0,2&amp;1,3&amp;2</span></span><br></pre></td></tr></table></figure><h2 id="8、indexOf"><a href="#8、indexOf" class="headerlink" title="8、indexOf"></a>8、indexOf</h2><blockquote><p> 在数组中搜索元素并返回其位置。 </p><p>搜索将从指定位置开始，如果未指定开始位置，则从头开始，并在数组末尾结束搜索。</p><p>如果未找到该项目，则 <code>indexOf()</code> 返回 -1。</p><p>如果该项目出现多次，则 <code>indexOf()</code> 方法返回第一次出现的位置。</p><p><strong>注：</strong>  第一项的位置为 0，第二项的位置为 1，依此类推。 </p><p><strong>语法：</strong> array.indexOf(item [, start])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> index = arr.<span class="title function_">indexOf</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//index = 0;</span></span><br></pre></td></tr></table></figure><h2 id="9、isArray"><a href="#9、isArray" class="headerlink" title="9、isArray"></a>9、isArray</h2><blockquote><p> 检查对象是否为数组。 </p><p> 如果对象是数组，则此函数返回 true，否则返回 false。 </p><p><strong>语法：</strong> Array.isArray(obj)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> bool = <span class="title class_">Arrary</span>.<span class="title function_">isArray</span>(arr);</span><br><span class="line"><span class="comment">//bool = true;</span></span><br></pre></td></tr></table></figure><h2 id="10、join"><a href="#10、join" class="headerlink" title="10、join"></a>10、join</h2><blockquote><p> 将数组的所有元素连接成一个字符串。 </p><p> 元素将由指定的分隔符分隔。默认分隔符是逗号 (,)。 </p><p><strong>语法：</strong> array.join(separator)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> str = arr.<span class="title function_">join</span>();</span><br><span class="line"><span class="comment">//str = &quot;1,2,3&quot;;</span></span><br></pre></td></tr></table></figure><h2 id="11、map"><a href="#11、map" class="headerlink" title="11、map"></a>11、map</h2><blockquote><p> 使用为每个数组元素调用函数的结果创建新数组。 </p><p><strong>注：</strong>  对没有值的数组元素不执行函数。 </p><p><strong>语法：</strong> array.map(function(currentValue, index, arr) [, thisValue])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">item,index,arr</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> item++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(fn);</span><br><span class="line"><span class="comment">//newArr = [2,3,4];</span></span><br></pre></td></tr></table></figure><h2 id="12、pop"><a href="#12、pop" class="headerlink" title="12、pop"></a>12、pop</h2><blockquote><p> 删除数组的最后一个元素，并返回该元素。 </p><p><strong>注：</strong>  方法会改变数组的长度。 </p><p><strong>语法：</strong> arr.pop()</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> item = arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">//arr = [1,2];</span></span><br><span class="line"><span class="comment">//item = 3;</span></span><br></pre></td></tr></table></figure><h2 id="13、push"><a href="#13、push" class="headerlink" title="13、push"></a>13、push</h2><blockquote><p> 将新元素添加到数组的末尾，并返回新的长度。</p><p><strong>注：</strong>  方法会改变数组的长度。 </p><p><strong>语法：</strong> array.push(item1 [, item2, …, itemX])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> len = arr.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//arr = [1,2,3,4];</span></span><br><span class="line"><span class="comment">//len = 4;</span></span><br></pre></td></tr></table></figure><h2 id="14、reduce"><a href="#14、reduce" class="headerlink" title="14、reduce"></a>14、reduce</h2><blockquote><p> 将数组的值减为单个值（从左到右）。 </p><p> 函数的返回值存储在累加器中（结果&#x2F;总计）。 </p><p><strong>注：</strong>  对没有值的数组元素，不执行 <code>reduce()</code> 方法。 </p><p><strong>语法：</strong> array.reduce(function(total, currentValue, currentIndex, arr) [, initialValue])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">pre,cur</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum = arr.<span class="title function_">reduce</span>(fn,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//sum = 0+1+2+3 = 6;</span></span><br></pre></td></tr></table></figure><h2 id="15、reverse"><a href="#15、reverse" class="headerlink" title="15、reverse"></a>15、reverse</h2><blockquote><p> 反转数组中元素的顺序。 </p><p><strong>语法：</strong> array.reverse()</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="comment">//arr = [3,2,1];</span></span><br></pre></td></tr></table></figure><h2 id="16、shift"><a href="#16、shift" class="headerlink" title="16、shift"></a>16、shift</h2><blockquote><p> 删除数组的第一个元素，并返回该元素。 </p><p><strong>注：</strong>  方法会改变数组的长度。 </p><p><strong>注：</strong>   方法的返回值是被移除的项目。 </p><p><strong>语法：</strong> array.shift()</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> item = arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="comment">//arr = [2,3];</span></span><br><span class="line"><span class="comment">//item = 1;</span></span><br></pre></td></tr></table></figure><h2 id="17、slice"><a href="#17、slice" class="headerlink" title="17、slice"></a>17、slice</h2><blockquote><p> 选择数组的一部分，并返回新数组。 </p><p> 方法选择从给定的 <em>start</em> 参数开始的元素，并在给定的 <em>end</em> 参数处结束，但不包括。 </p><p><strong>语法：</strong> array.slice(start, end)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">slice</span>(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//newArr = [4,5];</span></span><br></pre></td></tr></table></figure><h2 id="18、some"><a href="#18、some" class="headerlink" title="18、some"></a>18、some</h2><blockquote><p> 检查数组中的任何元素是否通过测试。 </p><p> 如果找到函数返回真值的数组元素，some() 返回真 ，否则返回false。</p><p><strong>注：</strong>  对没有值的数组元素不执行函数。 </p><p><strong>语法：</strong> array.some(function(currentValue, index, arr) [, thisValue])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">item,index,arr</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> item &gt; <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bool = arr.<span class="title function_">some</span>(fn);</span><br><span class="line"><span class="comment">//bool = true;</span></span><br></pre></td></tr></table></figure><h2 id="19、sort"><a href="#19、sort" class="headerlink" title="19、sort"></a>19、sort</h2><blockquote><p> 对数组的元素进行排序。 </p><p> 排序顺序可以是按字母或数字，也可以是升序（向上）或降序（向下）。 </p><p> 默认情况下，<code>sort()</code> 方法将按字母和升序将值作为字符串进行排序。 </p><p><strong>语法：</strong> array.sort(compareFunction)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line">arr.<span class="title function_">sort</span>(fn1);</span><br><span class="line"><span class="comment">//arr = [1,2,3];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> b-a;</span><br><span class="line">&#125;</span><br><span class="line">arr.<span class="title function_">sort</span>(fn2);</span><br><span class="line"><span class="comment">//arr = [3,2,1];</span></span><br></pre></td></tr></table></figure><h2 id="20、splice"><a href="#20、splice" class="headerlink" title="20、splice"></a>20、splice</h2><blockquote><p> 从数组中添加&#x2F;删除元素。 </p><p><strong>语法：</strong> array.splice(index, howmany [, item1, ….., itemX])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">//arr = [1,4,2,3];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//arr = [1,2];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除并添加</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"><span class="comment">//arr = [8,9,3]</span></span><br></pre></td></tr></table></figure><h2 id="21、toString"><a href="#21、toString" class="headerlink" title="21、toString"></a>21、toString</h2><blockquote><p> 将数组转换为字符串，并返回结果， 以逗号分隔 。 </p><p><strong>语法：</strong> array.toString()</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">var str = arr.toString();</span><br><span class="line">//str = &quot;1,2,3&quot;;</span><br></pre></td></tr></table></figure><h2 id="22、unshift"><a href="#22、unshift" class="headerlink" title="22、unshift"></a>22、unshift</h2><blockquote><p> 将新元素添加到数组的开头，并返回新的长度。 </p><p><strong>注：</strong>  方法会改变数组的长度。 </p><p><strong>语法：</strong> array.unshift(item1 [, item2, …, itemX])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//arr = [1,2,3,4,5];</span></span><br></pre></td></tr></table></figure><h1 id="二、ES6数组API"><a href="#二、ES6数组API" class="headerlink" title="二、ES6数组API"></a>二、ES6数组API</h1><h2 id="1、entries"><a href="#1、entries" class="headerlink" title="1、entries"></a>1、entries</h2><blockquote><p> 返回键&#x2F;值对数组迭代对象。 </p><p><strong>语法：</strong>array.entries()</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = arr.<span class="title function_">entries</span>();</span><br></pre></td></tr></table></figure><h2 id="2、fill"><a href="#2、fill" class="headerlink" title="2、fill"></a>2、fill</h2><blockquote><p> 用静态值填充所有数组元素 。</p><p> 您可以指定开始和结束填充的位置。如果未指定，则将填充所有元素。 </p><p><strong>语法：</strong> array.fill(value, start, end)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">9</span>);</span><br><span class="line"><span class="comment">//arr = [9,9,9];</span></span><br></pre></td></tr></table></figure><h2 id="3、find"><a href="#3、find" class="headerlink" title="3、find"></a>3、find</h2><blockquote><p> 返回数组中第一个通过测试的元素的值。 </p><p> 如果找到函数返回 true 值的数组元素，则 find() 返回该数组元素的值 ，否则返回undefind。</p><p><strong>注：</strong>  不对空数组执行该函数。 </p><p><strong>语法：</strong> array.find(function(currentValue, index, arr) [, thisValue])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> num &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> val = arr.<span class="title function_">find</span>(fn);</span><br><span class="line"><span class="comment">//val = 2;</span></span><br></pre></td></tr></table></figure><h2 id="4、findIndex"><a href="#4、findIndex" class="headerlink" title="4、findIndex"></a>4、findIndex</h2><blockquote><p> 返回数组中通过测试的第一个元素的索引。 </p><p> 如果找到函数返回 true 值的数组元素，则 findIndex() 返回该数组元素的索引 ，否则返回-1。</p><p><strong>注：</strong>  不会为没有值的数组元素执行函数。 </p><p><strong>语法：</strong> array.findIndex(function(currentValue, index, arr) [, thisValue])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> index = arr.<span class="title function_">findIndex</span>(fn)</span><br><span class="line"><span class="comment">//index = 1;</span></span><br></pre></td></tr></table></figure><h2 id="5、from"><a href="#5、from" class="headerlink" title="5、from"></a>5、from</h2><blockquote><p>  从具有 length 属性或可迭代对象的任何对象创建数组 。 </p><p><strong>语法：</strong> Array.from(object [, mapFunction, thisValue])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="title class_">Arrary</span>.<span class="title function_">from</span>(<span class="string">&quot;ASDFG&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="title class_">Arrary</span>.<span class="title function_">from</span>(obj);</span><br><span class="line"><span class="comment">//arr1 = [&#x27;A&#x27;,&#x27;S&#x27;,&#x27;D&#x27;,&#x27;F&#x27;,&#x27;G&#x27;];</span></span><br><span class="line"><span class="comment">//arr2 = [1,2,3];</span></span><br></pre></td></tr></table></figure><h2 id="6、includes"><a href="#6、includes" class="headerlink" title="6、includes"></a>6、includes</h2><blockquote><p> 检查数组是否包含指定的元素。 </p><p> 如果数组包含元素，则此方法返回 <code>true</code>，否则返回 <code>false</code>。 </p><p><strong>注：</strong>  方法区分大小写。 </p><p><strong>语法：</strong> array.includes(element [, start])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> bool = arr.<span class="title function_">includes</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//bool = true;</span></span><br></pre></td></tr></table></figure><h2 id="7、keys"><a href="#7、keys" class="headerlink" title="7、keys"></a>7、keys</h2><blockquote><p> 返回 Array Iteration 对象，包含原始数组的键。</p><p><strong>语法：</strong> array.keys()</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = arr.<span class="title function_">keys</span>();</span><br></pre></td></tr></table></figure><h2 id="8、flat"><a href="#8、flat" class="headerlink" title="8、flat"></a>8、flat</h2><blockquote><p>扁平化数组，返回扁平化后的数组，不改变原数组<br>接受一个整数作为参数，表示扁平的层数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]]]</span><br><span class="line"><span class="keyword">let</span> res = list.<span class="title function_">flat</span>()   <span class="comment">// [1,2,3,4,4,4,[5,5,5]]</span></span><br><span class="line"><span class="keyword">let</span> res = list.<span class="title function_">flat</span>(<span class="number">2</span>)  <span class="comment">// [1,2,3,4,4,4,5,5,5]</span></span><br></pre></td></tr></table></figure><h1 id="三、会改变原数组的API"><a href="#三、会改变原数组的API" class="headerlink" title="三、会改变原数组的API"></a>三、会改变原数组的API</h1><p><code>splice</code>、<code>reverse</code>、<code>sort</code>、<code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>fill</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【烧脑算法】经典排序</title>
      <link href="/posts/2899047894/"/>
      <url>/posts/2899047894/</url>
      
        <content type="html"><![CDATA[<h1 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p> 冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。 </p><h2 id="2、算法步骤"><a href="#2、算法步骤" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h2><ul><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。 </li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 </li><li>针对所有的元素重复以上的步骤，除了最后一个。 </li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><h2 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;        <span class="comment">// 相邻元素两两对比</span></span><br><span class="line">                <span class="keyword">var</span> temp = arr[j+<span class="number">1</span>];        <span class="comment">// 元素交换</span></span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、性能分析"><a href="#4、性能分析" class="headerlink" title="4、性能分析"></a>4、性能分析</h2><ul><li>平均时间复杂度： O(n^2^)</li><li>最好情况： O(n)</li><li>最坏情况： O(n^2^)</li><li>空间复杂度： O(1)</li><li>稳定性： 稳定</li></ul><h1 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h1><h2 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h2><p> 选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。 </p><h2 id="2、算法步骤-1"><a href="#2、算法步骤-1" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h2><ul><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。 </li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 </li><li>重复第二步，直到所有元素均排序完毕。</li></ul><h2 id="3、代码-1"><a href="#3、代码-1" class="headerlink" title="3、代码"></a>3、代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> minIndex, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class="comment">// 寻找最小的数</span></span><br><span class="line">                minIndex = j;                 <span class="comment">// 将最小数的索引保存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、性能分析-1"><a href="#4、性能分析-1" class="headerlink" title="4、性能分析"></a>4、性能分析</h2><ul><li>平均时间复杂度： O(n^2^)</li><li>最好情况： O(n^2^)</li><li>最坏情况： O(n^2^)</li><li>空间复杂度： O(1)</li><li>稳定性： 不稳定</li></ul><h1 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h1><h2 id="1、介绍-2"><a href="#1、介绍-2" class="headerlink" title="1、介绍"></a>1、介绍</h2><p> 插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。 </p><h2 id="2、算法步骤-2"><a href="#2、算法步骤-2" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h2><ul><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。 </li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。</li></ul><h2 id="3、代码-2"><a href="#3、代码-2" class="headerlink" title="3、代码"></a>3、代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> preIndex, current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex = i - <span class="number">1</span>;</span><br><span class="line">        current = arr[i];</span><br><span class="line">        <span class="keyword">while</span>(preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex+<span class="number">1</span>] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex+<span class="number">1</span>] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、性能分析-2"><a href="#4、性能分析-2" class="headerlink" title="4、性能分析"></a>4、性能分析</h2><ul><li>平均时间复杂度： O(n^2^)</li><li>最好情况： O(n)</li><li>最坏情况： O(n^2^)</li><li>空间复杂度： O(1)</li><li>稳定性： 稳定</li></ul><h1 id="四、希尔排序"><a href="#四、希尔排序" class="headerlink" title="四、希尔排序"></a>四、希尔排序</h1><h2 id="1、介绍-3"><a href="#1、介绍-3" class="headerlink" title="1、介绍"></a>1、介绍</h2><p> 希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。  希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。 </p><h2 id="2、算法步骤-3"><a href="#2、算法步骤-3" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h2><ul><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk &#x3D; 1； </li><li>按增量序列个数 k，对序列进行 k 趟排序； </li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h2 id="3、代码-3"><a href="#3、代码-3" class="headerlink" title="3、代码"></a>3、代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shellSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>,</span><br><span class="line">        temp,</span><br><span class="line">        gap = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(gap &lt; len/<span class="number">3</span>) &#123;          <span class="comment">//动态定义间隔序列</span></span><br><span class="line">        gap =gap*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(gap/<span class="number">3</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i-gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j-=gap) &#123;</span><br><span class="line">                arr[j+gap] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、性能分析-3"><a href="#4、性能分析-3" class="headerlink" title="4、性能分析"></a>4、性能分析</h2><ul><li>平均时间复杂度： O(n log n)</li><li>最好情况： O(n long^2^ n)</li><li>最坏情况： O(n long^2^ n)</li><li>空间复杂度： O(1)</li><li>稳定性： 不稳定</li></ul><h1 id="五、归并排序"><a href="#五、归并排序" class="headerlink" title="五、归并排序"></a>五、归并排序</h1><h2 id="1、介绍-4"><a href="#1、介绍-4" class="headerlink" title="1、介绍"></a>1、介绍</h2><p> 归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。 </p><h2 id="2、算法步骤-4"><a href="#2、算法步骤-4" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h2><ul><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ul><h2 id="3、代码-4"><a href="#3、代码-4" class="headerlink" title="3、代码"></a>3、代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;  <span class="comment">// 采用自上而下的递归方法</span></span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> middle = <span class="title class_">Math</span>.<span class="title function_">floor</span>(len / <span class="number">2</span>),</span><br><span class="line">        left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, middle),</span><br><span class="line">        right = arr.<span class="title function_">slice</span>(middle);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left), <span class="title function_">mergeSort</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left, right</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.<span class="property">length</span> &amp;&amp; right.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.<span class="property">length</span>)</span><br><span class="line">        result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (right.<span class="property">length</span>)</span><br><span class="line">        result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、性能分析-4"><a href="#4、性能分析-4" class="headerlink" title="4、性能分析"></a>4、性能分析</h2><ul><li>平均时间复杂度： O(n log n)</li><li>最好情况： O(n long n)</li><li>最坏情况： O(n long n)</li><li>空间复杂度： O(n)</li><li>稳定性： 稳定</li></ul><h1 id="六、快速排序"><a href="#六、快速排序" class="headerlink" title="六、快速排序"></a>六、快速排序</h1><h2 id="1、介绍-5"><a href="#1、介绍-5" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><h2 id="2、算法步骤-5"><a href="#2、算法步骤-5" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h2><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ul><h2 id="3、代码-5"><a href="#3、代码-5" class="headerlink" title="3、代码"></a>3、代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left = <span class="keyword">typeof</span> left != <span class="string">&#x27;number&#x27;</span> ? <span class="number">0</span> : left,</span><br><span class="line">        right = <span class="keyword">typeof</span> right != <span class="string">&#x27;number&#x27;</span> ? len - <span class="number">1</span> : right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = <span class="title function_">partition</span>(arr, left, right);</span><br><span class="line">        <span class="title function_">quickSort</span>(arr, left, partitionIndex-<span class="number">1</span>);</span><br><span class="line">        <span class="title function_">quickSort</span>(arr, partitionIndex+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">arr, left ,right</span>) &#123;     <span class="comment">// 分区操作</span></span><br><span class="line">    <span class="keyword">var</span> pivot = left,                      <span class="comment">// 设定基准值（pivot）</span></span><br><span class="line">        index = pivot + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            <span class="title function_">swap</span>(arr, i, index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">swap</span>(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">arr, i, j</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition2</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[low];</span><br><span class="line">  <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt; pivot) &#123;</span><br><span class="line">      --high;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[low] = arr[high];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) &#123;</span><br><span class="line">      ++low;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[high] = arr[low];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[low] = pivot;</span><br><span class="line">  <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort2</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = <span class="title function_">partition2</span>(arr, low, high);</span><br><span class="line">    <span class="title function_">quickSort2</span>(arr, low, pivot - <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">quickSort2</span>(arr, pivot + <span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、性能分析-5"><a href="#4、性能分析-5" class="headerlink" title="4、性能分析"></a>4、性能分析</h2><ul><li>平均时间复杂度： O(n log n)</li><li>最好情况： O(n long n)</li><li>最坏情况： O(n^2^)</li><li>空间复杂度： O(log n)</li><li>稳定性： 不稳定</li></ul><h1 id="七、其他排序"><a href="#七、其他排序" class="headerlink" title="七、其他排序"></a>七、<a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">其他排序</a></h1><ul><li>堆排序</li><li>计数排序</li><li>桶排序</li><li>基数排序</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文档】Webstorm自动编译Less</title>
      <link href="/posts/1252960652/"/>
      <url>/posts/1252960652/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境需要"><a href="#一、环境需要" class="headerlink" title="一、环境需要"></a>一、环境需要</h1><p>下载和安装 <a href="https://nodejs.org/en/">Node.js</a>。</p><p><img src="/img/tools/less_1.png" alt="less_1"></p><h1 id="二、安装less模块"><a href="#二、安装less模块" class="headerlink" title="二、安装less模块"></a>二、安装less模块</h1><p>打开<code>cmd</code>控制台或<code>项目</code>控制台</p><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less -g</span><br></pre></td></tr></table></figure><p>安装<code>less-plugin-clean-css</code>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less-plugin-clean-css -g</span><br></pre></td></tr></table></figure><p>查看自己是否安装上</p><p><img src="/img/tools/less_2.png" alt="less_2"></p><h1 id="三、webstorm配置"><a href="#三、webstorm配置" class="headerlink" title="三、webstorm配置"></a>三、webstorm配置</h1><p>进入webstorm： 点击File&gt;Settings&gt;Tools&gt;File Watchers 添加less自动编译参数 </p><p><img src="/img/tools/less_3.png" alt="less_3"></p><p><img src="/img/tools/less_4.png" alt="less_4"></p><p> <strong>注意：所有配置默认就行</strong></p><h1 id="四、手动编译less文件"><a href="#四、手动编译less文件" class="headerlink" title="四、手动编译less文件"></a>四、手动编译less文件</h1><p>将以上环境和依赖下载安装完毕</p><p>控制台进入要编译的less文件目录，输入命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc filename.less filename.css</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文档】maven安装配置</title>
      <link href="/posts/1789485702/"/>
      <url>/posts/1789485702/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Maven的下载"><a href="#一、Maven的下载" class="headerlink" title="一、Maven的下载"></a>一、Maven的下载</h1><p><a href="https://maven.apache.org/download.cgi">官网地址</a></p><p><img src="/img/tools/mvn_1.png" alt="mvn_1"></p><p>下载后，找到合适位置进行解压，文件目录如下：</p><p><img src="/img/tools/mvn_2.png" alt="mvn_2"></p><h1 id="二、Maven常用配置"><a href="#二、Maven常用配置" class="headerlink" title="二、Maven常用配置"></a>二、Maven常用配置</h1><p>前提：在配置之前需将 <a href="https://blog.csdn.net/m0_59440594/article/details/122914737">JDK</a> 安装好。</p><h2 id="1、环境变量配置"><a href="#1、环境变量配置" class="headerlink" title="1、环境变量配置"></a>1、环境变量配置</h2><p><strong>桌面 —&gt; 右击此电脑 —&gt; 属性 –&gt; 找到高级系统设置 —&gt; 环境变量</strong></p><p><img src="/img/tools/mvn_3.png" alt="mvn_3"></p><h3 id="1-添加MAVEN-HOME，"><a href="#1-添加MAVEN-HOME，" class="headerlink" title="(1)添加MAVEN_HOME，"></a>(1)添加<code>MAVEN_HOME</code>，</h3><p><img src="/img/tools/mvn_4.png" alt="mvn_4"></p><p><img src="/img/tools/mvn_5.png" alt="mvn_5"></p><h3 id="2-编辑Path环境变量"><a href="#2-编辑Path环境变量" class="headerlink" title="(2)编辑Path环境变量"></a>(2)编辑Path环境变量</h3><p><img src="/img/tools/mvn_6.png" alt="mvn_6"></p><p><img src="/img/tools/mvn_7.png" alt="mvn_7"></p><h3 id="3-测试maven是否配置成功"><a href="#3-测试maven是否配置成功" class="headerlink" title="(3)测试maven是否配置成功"></a>(3)测试maven是否配置成功</h3><p>打开cmd，输入<code>mvn -v</code>。</p><p><img src="/img/tools/mvn_8.png" alt="mvn_8"></p><h2 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h2><p>通常我们需要修改解压目录下<code>conf/settings.xml</code>文件，这样可以更好的适合我们的使用。</p><p><strong>此处注意</strong>：所有的修改一定要在注释标签外面，不然修改无效。Maven很多标签都是给的例子，都是注释掉的。</p><p><img src="/img/tools/mvn_9.png" alt="mvn_9"></p><h3 id="1-本地仓库位置修改"><a href="#1-本地仓库位置修改" class="headerlink" title="(1)本地仓库位置修改"></a>(1)本地仓库位置修改</h3><p> 在&lt;**localRepository**&gt;标签内添加自己的本地位置路径 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- localRepository</span><br><span class="line">  | The path to the <span class="built_in">local</span> repository maven will use to store artifacts.</span><br><span class="line">  |</span><br><span class="line">  | Default: <span class="variable">$&#123;user.home&#125;</span>/.m2/repository</span><br><span class="line"> &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;localRepository&gt;D:\repository&lt;/localRepository&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/tools/mvn_10.png" alt="mvn_10"></p><h3 id="2-修改maven默认的JDK版本"><a href="#2-修改maven默认的JDK版本" class="headerlink" title="(2)修改maven默认的JDK版本"></a>(2)修改maven默认的JDK版本</h3><p> 在&lt;**profiles**&gt;标签下添加一个&lt;**profile**&gt;标签，修改maven默认的JDK版本。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;profile&gt;     </span><br><span class="line">    &lt;<span class="built_in">id</span>&gt;JDK-1.8&lt;/id&gt;       </span><br><span class="line">    &lt;activation&gt;       </span><br><span class="line">        &lt;activeByDefault&gt;<span class="literal">true</span>&lt;/activeByDefault&gt;       </span><br><span class="line">        &lt;jdk&gt;1.8&lt;/jdk&gt;       </span><br><span class="line">    &lt;/activation&gt;       </span><br><span class="line">    &lt;properties&gt;       </span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;       </span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;       </span><br><span class="line">        &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;       </span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看自己的<code>JDK</code>版本，打开cmd输入命令</p><p><img src="/img/tools/mvn_11.png" alt="mvn_11"></p><h3 id="3-添加国内镜像源"><a href="#3-添加国内镜像源" class="headerlink" title="(3)添加国内镜像源"></a>(3)添加国内镜像源</h3><p> 添加&lt;**mirrors**&gt;标签下&lt;**mirror**&gt;，添加国内镜像源，这样下载jar包速度很快。默认的中央仓库有时候甚至连接不通。一般使用阿里云镜像库即可。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">&lt;!--阿里云公共仓库是central仓和jcenter仓的聚合仓--&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;阿里云公共仓库&lt;/name&gt;</span><br><span class="line">&lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;阿里云谷歌仓库&lt;/name&gt;</span><br><span class="line">&lt;url&gt;https://maven.aliyun.com/repository/google&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;阿里云阿帕奇仓库&lt;/name&gt;</span><br><span class="line">&lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;阿里云spring仓库&lt;/name&gt;</span><br><span class="line">&lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;阿里云spring插件仓库&lt;/name&gt;</span><br><span class="line">&lt;url&gt;https://maven.aliyun.com/repository/spring-plugin&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;maven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;maven仓库&lt;/name&gt;</span><br><span class="line">&lt;url&gt;https://mvnrepository.com/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、常用IDE下配置Maven"><a href="#三、常用IDE下配置Maven" class="headerlink" title="三、常用IDE下配置Maven"></a>三、常用IDE下配置Maven</h1><p> 目前常用的开发工具如idea，eclipse都自身集成了一个版本的Maven。但是通常我们使用自己已经配置好的Maven。 </p><h2 id="1、IDEA下配置Maven"><a href="#1、IDEA下配置Maven" class="headerlink" title="1、IDEA下配置Maven"></a>1、IDEA下配置Maven</h2><p> <strong>IDEA开发工具配置Maven路径：File—-&gt;Settings—-&gt;Maven</strong> </p><p><img src="/img/tools/mvn_12.png" alt="mvn_12"></p><p>2、Eclipse下配置Maven</p><p>（1）将eclipse使用的Maven修改为自己的。点击add后选择自己Maven的安装目录即可。添加好之后记得勾选。</p><p><img src="/img/tools/mvn_13.png" alt="mvn_13"></p><p>（2）将所有的settings修改为自己Maven目录下的conf&#x2F;settings.xml.点击Update Settings按钮，下面的Local Respository会自动识别出来。</p><p><img src="/img/tools/mvn_14.png" alt="mvn_14"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文档】tomcat安装配置</title>
      <link href="/posts/1106443223/"/>
      <url>/posts/1106443223/</url>
      
        <content type="html"><![CDATA[<h1 id="一、tomcat下载配置"><a href="#一、tomcat下载配置" class="headerlink" title="一、tomcat下载配置"></a>一、tomcat下载配置</h1><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><ul><li><a href="https://tomcat.apache.org/">官方地址</a></li></ul><p><img src="/img/tools/tomcat_13.png" alt="tomcat_13"><br><strong>注意: zip是免安装版，exe是安装版，系统按自己电脑选择。</strong></p><h2 id="2、配置环境"><a href="#2、配置环境" class="headerlink" title="2、配置环境"></a>2、配置环境</h2><h3 id="1-添加变量"><a href="#1-添加变量" class="headerlink" title="(1)添加变量"></a>(1)添加变量</h3><p>变量名：CATALINA_HOME</p><p>变量值：你tomcat的安装&#x2F;解压目录</p><p><img src="/img/tools/tomcat_16.png" alt="tomcat_16"></p><h3 id="2-在path中添加-CATALINA-HOME-lib"><a href="#2-在path中添加-CATALINA-HOME-lib" class="headerlink" title="(2)在path中添加%CATALINA_HOME%\lib"></a>(2)在path中添加<code>%CATALINA_HOME%\lib</code></h3><p><img src="/img/tools/tomcat_17.png" alt="tomcat_17"></p><p>下载安装完毕，可以进入下载目录，找到bin目录下的启动文件<code>startup.bat</code>,启动tomcat服务</p><p><img src="/img/tools/tomcat_14.png" alt="tomcat_14"></p><p><img src="/img/tools/tomcat_15.png" alt="tomcat_15"></p><p>启动 Tomcat（或运行startup.bat服务）后，打开浏览器，输入<a href="http://localhost:8080/">http://localhost:8080</a>进入如下页面，则表示安装成功</p><p><img src="/img/tools/tomcat_18.png" alt="tomcat_18"></p><p>如果出现 404 页面，请参照上面环境变量配置，检查环境变量是否正确配置，然后再重启 Tomcat测试。</p><h1 id="二、idea配置tomcat"><a href="#二、idea配置tomcat" class="headerlink" title="二、idea配置tomcat"></a>二、idea配置tomcat</h1><h2 id="1、添加tomcat"><a href="#1、添加tomcat" class="headerlink" title="1、添加tomcat"></a>1、添加tomcat</h2><p>打开<code>idea</code>项目，找到<code>run</code></p><p><img src="/img/tools/tomcat_1.png" alt="tomcat_1"></p><h2 id="2、点击Edit-Configurations-进入如下界面。"><a href="#2、点击Edit-Configurations-进入如下界面。" class="headerlink" title="2、点击Edit Configurations 进入如下界面。"></a>2、点击<code>Edit Configurations</code> 进入如下界面。</h2><p><img src="/img/tools/tomcat_2.png" alt="tomcat_2"></p><h2 id="3、点击加号"><a href="#3、点击加号" class="headerlink" title="3、点击加号"></a>3、点击加号</h2><p>找到<code>Tomcat Server</code>中的<code>Local</code>进行添加</p><p><img src="/img/tools/tomcat_3.png" alt="tomcat_3"></p><h2 id="4、在这里配置tomcat信息"><a href="#4、在这里配置tomcat信息" class="headerlink" title="4、在这里配置tomcat信息"></a>4、在这里配置tomcat信息</h2><p><img src="/img/tools/tomcat_4.png" alt="tomcat_4"></p><h2 id="5、更多配置"><a href="#5、更多配置" class="headerlink" title="5、更多配置"></a>5、更多配置</h2><p> 填写好基本tomcat信息后，点击ok。我们就配置好了Tomcat，此时我们会看到。项目中显示了我们刚才配置的的Tomcat。<br>但是直接运行的话，会报错，所以我们还需要配置 </p><p><img src="/img/tools/tomcat_5.png" alt="tomcat_5"></p><h2 id="6、打开File中的Project-Structure"><a href="#6、打开File中的Project-Structure" class="headerlink" title="6、打开File中的Project Structure"></a>6、打开<code>File</code>中的<code>Project Structure</code></h2><p><img src="/img/tools/tomcat_6.png" alt="tomcat_6"></p><h2 id="7、找到Module，右击，add一个Web"><a href="#7、找到Module，右击，add一个Web" class="headerlink" title="7、找到Module，右击，add一个Web"></a>7、找到<code>Module</code>，右击，<code>add</code>一个<code>Web</code></h2><p><img src="/img/tools/tomcat_7.png" alt="tomcat_7"></p><h2 id="8、做如下配置，点击Apply"><a href="#8、做如下配置，点击Apply" class="headerlink" title="8、做如下配置，点击Apply"></a>8、做如下配置，点击Apply</h2><p><img src="/img/tools/tomcat_8.png" alt="tomcat_8"></p><h2 id="9、配置Artifacts"><a href="#9、配置Artifacts" class="headerlink" title="9、配置Artifacts"></a>9、配置Artifacts</h2><p> 在<code>Artifacts</code>中，点击绿色加号。选择<code>Web Application:Exploded</code>，然后再选择我们刚配置的Moudules </p><p><img src="/img/tools/tomcat_9.png" alt="tomcat_9"></p><p> 然后没什么可修改的，直接点ok就好。到这里我们的Artifacts就配置好了 </p><p><img src="/img/tools/tomcat_10.png" alt="tomcat_10"></p><p> 点击Artifact后， 自动加载了<code>servletDay01:war exploded</code>。这里我们需要设置一个<code>Application context</code>，斜杠开头，后面跟着你的模块名称(idea中我习惯叫模块。如果是eclipse的用户，这个就是项目名称)。点击OK。 </p><p><img src="/img/tools/tomcat_11.png" alt="tomcat_11"></p><h2 id="10、-至此，全部配置完毕，我们可以运行Tomcat了"><a href="#10、-至此，全部配置完毕，我们可以运行Tomcat了" class="headerlink" title="10、 至此，全部配置完毕，我们可以运行Tomcat了"></a>10、 至此，全部配置完毕，我们可以运行Tomcat了</h2><p><img src="/img/tools/tomcat_12.png" alt="tomcat_12"></p><h2 id="11、解决idea控制台乱码问题"><a href="#11、解决idea控制台乱码问题" class="headerlink" title="11、解决idea控制台乱码问题"></a>11、解决idea控制台乱码问题</h2><ul><li><a href="https://blog.csdn.net/weixin_43709366/article/details/123852908">小黑Catsayer博客</a></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文档】mysql安装配置</title>
      <link href="/posts/2816447427/"/>
      <url>/posts/2816447427/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MySQL官网下载"><a href="#一、MySQL官网下载" class="headerlink" title="一、MySQL官网下载"></a>一、MySQL官网下载</h1><ul><li><a href="https://dev.mysql.com/downloads/">mysql产品档案</a><br><img src="/img/tools/mysql_pru1.png" alt="picture"></li></ul><h1 id="二、转载链接"><a href="#二、转载链接" class="headerlink" title="二、转载链接"></a>二、转载链接</h1><ul><li><a href="http://c.biancheng.net/view/7135.html">语言中文网</a>  </li><li><a href="https://blog.csdn.net/SoloVersion/article/details/123760428">SoloVersion的博客</a></li></ul><h1 id="三、MySQL工作台下载"><a href="#三、MySQL工作台下载" class="headerlink" title="三、MySQL工作台下载"></a>三、MySQL工作台下载</h1><ul><li><a href="https://dev.mysql.com/downloads/">mysql产品档案</a><br><img src="/img/tools/mysql_pru2.png" alt="picture"></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文档-Git】Git常用指令</title>
      <link href="/posts/1267579224/"/>
      <url>/posts/1267579224/</url>
      
        <content type="html"><![CDATA[<h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><p>git安装和密钥配置，请看<a href="https://blog.xly.plus/posts/6638260/">hexo使用教程</a>。</p><p><a href="https://blog.csdn.net/qq_56180999/article/details/117634968?spm=1001.2014.3001.5501">博主csdn的git教程。</a></p><h2 id="一、git基本开发模式"><a href="#一、git基本开发模式" class="headerlink" title="一、git基本开发模式"></a>一、git基本开发模式</h2><ol><li><p>项目初始阶段，初始化项目</p><p>进入到项目目录，右击打开<code>git bush</code>面板，输入指令：</p></li><li><p>提交本地的代码到仓库，将本地仓库的代码推送到远端库(<code>push</code>)</p></li></ol><p><strong>项目开发人员从远端库克隆代码到本机（<code>clone</code>），此时本地仅有一个<code>master</code>分支；新建dev分支并切换、在Dev分支中进行开发工作，其实就是修改并提交代码（<code>add+commit</code>）；当开发的dev分支的代码没问题时，将dev分支合并（<code>merge</code>）到<code>master</code>；将<code>master</code>推送到远端分支，至此，其他的项目开发人员就可以查看到你提交的代码了！</strong></p><p> dev分支也可以是修复某个bug或者为了开发某个issue建立的，当bug已经修复或issue开发完成时，把dev合并到master之后，就可以把它删除了 。</p><h2 id="二、git指令详解"><a href="#二、git指令详解" class="headerlink" title="二、git指令详解"></a>二、git指令详解</h2><h3 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h3><p>创建一个git仓库，创建之后就会在当前目录生成一个.git的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init<span class="comment">#在项目目录进入git bush面板</span></span><br></pre></td></tr></table></figure><h3 id="2、系统配置"><a href="#2、系统配置" class="headerlink" title="2、系统配置"></a>2、系统配置</h3><p> 该命令将分别设置提交代码的用户名和电子邮件地址 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.name “[name]”</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.email “[email address]”</span><br></pre></td></tr></table></figure><h3 id="3、添加文件到缓冲区"><a href="#3、添加文件到缓冲区" class="headerlink" title="3、添加文件到缓冲区"></a>3、添加文件到缓冲区</h3><p>单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [filename]</span><br></pre></td></tr></table></figure><p> 添加所有文件到缓冲区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br><span class="line">or</span><br><span class="line">git add --all</span><br></pre></td></tr></table></figure><p>加all可以添加被手动删除的文件，而加“*”不行。</p><h3 id="4、-删除文件"><a href="#4、-删除文件" class="headerlink" title="4、 删除文件"></a>4、 删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> [filename]</span><br></pre></td></tr></table></figure><p> 该命令将删除工作目录中的文件，并将删除动作添加到stage。 </p><h3 id="5、提交缓冲区的所有修改到仓库"><a href="#5、提交缓冲区的所有修改到仓库" class="headerlink" title="5、提交缓冲区的所有修改到仓库"></a>5、提交缓冲区的所有修改到仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交的说明&quot;</span></span><br><span class="line"></span><br><span class="line">commit可以一次提交缓冲区的所有文件</span><br></pre></td></tr></table></figure><h3 id="6、查看git库的状态"><a href="#6、查看git库的状态" class="headerlink" title="6、查看git库的状态"></a>6、查看git库的状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>未提交的文件，分为两种，add过已经在缓冲区的(绿色)，未add过的(红色)</p><h3 id="7、比较文件"><a href="#7、比较文件" class="headerlink" title="7、比较文件"></a>7、比较文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff [filename]</span><br></pre></td></tr></table></figure><p> 如果文件修改了，还没有提交，就可以比较文件修改前后的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --staged</span><br></pre></td></tr></table></figure><p>该命令可以显示尚未添加到stage的文件的变更。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff [first branch] [second branch]</span><br></pre></td></tr></table></figure><p> 该命令可以显示两个分支之间的差异。 </p><h3 id="8、查看日志"><a href="#8、查看日志" class="headerlink" title="8、查看日志"></a>8、查看日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="9、版本回退"><a href="#9、版本回退" class="headerlink" title="9、版本回退"></a>9、版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure><p>可以将当前仓库回退到历史的某个版本</p><ul><li><p>第一种用法，回到上一个版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure></li><li><p>第二中用法，回到指定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard [版本号]</span><br></pre></td></tr></table></figure></li></ul><h3 id="10、-查看仓库的操作历史"><a href="#10、-查看仓库的操作历史" class="headerlink" title="10、 查看仓库的操作历史"></a>10、 查看仓库的操作历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h3 id="11、分支管理"><a href="#11、分支管理" class="headerlink" title="11、分支管理"></a>11、分支管理</h3><h4 id="1-查看分支情况"><a href="#1-查看分支情况" class="headerlink" title="(1)查看分支情况"></a>(1)查看分支情况</h4><p> 前面带*号的就是当前分支 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure><h4 id="2-创建分支"><a href="#2-创建分支" class="headerlink" title="(2)创建分支"></a>(2)创建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [分支名]</span><br></pre></td></tr></table></figure><h4 id="3-切换当前分支到指定分支"><a href="#3-切换当前分支到指定分支" class="headerlink" title="(3)切换当前分支到指定分支"></a>(3)切换当前分支到指定分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [分支名]</span><br></pre></td></tr></table></figure><h4 id="4-创建分支并切换到创建的分支"><a href="#4-创建分支并切换到创建的分支" class="headerlink" title="(4)创建分支并切换到创建的分支"></a>(4)创建分支并切换到创建的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout  -b [分支名]</span><br></pre></td></tr></table></figure><h4 id="5-合并某分支的内容到当前分支"><a href="#5-合并某分支的内容到当前分支" class="headerlink" title="(5)合并某分支的内容到当前分支"></a>(5)合并某分支的内容到当前分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [分支名]</span><br></pre></td></tr></table></figure><p> 如果两个分支同时进行了同一个文件的修改和提交，在merge时就会产生冲突，首先要手动打开文件解决冲突，再提交，就相当于进行了merge </p><h4 id="6-删除分支"><a href="#6-删除分支" class="headerlink" title="(6)删除分支"></a>(6)删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [分支名]</span><br></pre></td></tr></table></figure><h4 id="7-查看分支合并图"><a href="#7-查看分支合并图" class="headerlink" title="(7)查看分支合并图"></a>(7)查看分支合并图</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure><h3 id="12、-版本标签"><a href="#12、-版本标签" class="headerlink" title="12、 版本标签"></a>12、 版本标签</h3><h4 id="1-为指定版本增加标签"><a href="#1-为指定版本增加标签" class="headerlink" title="(1)为指定版本增加标签"></a>(1)为指定版本增加标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [标签名] [版本号]</span><br></pre></td></tr></table></figure><h4 id="2-查看所有标签"><a href="#2-查看所有标签" class="headerlink" title="(2)查看所有标签"></a>(2)查看所有标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h4 id="3-查看标签的详细信息"><a href="#3-查看标签的详细信息" class="headerlink" title="(3)查看标签的详细信息"></a>(3)查看标签的详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show [标签名]</span><br></pre></td></tr></table></figure><h4 id="4-将tag-提交到远端仓库"><a href="#4-将tag-提交到远端仓库" class="headerlink" title="(4)将tag 提交到远端仓库"></a>(4)将tag 提交到远端仓库</h4><p> 推送所有tag: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [别名](origin) --tags</span><br></pre></td></tr></table></figure><p> 推送某个tag： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [别名](origin) v1.0 </span><br></pre></td></tr></table></figure><h3 id="13、git远端库相关"><a href="#13、git远端库相关" class="headerlink" title="13、git远端库相关"></a>13、git远端库相关</h3><h4 id="1-记录远程仓库地址并为其取别名"><a href="#1-记录远程仓库地址并为其取别名" class="headerlink" title="(1)记录远程仓库地址并为其取别名"></a>(1)记录远程仓库地址并为其取别名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [别名](origin) [远程仓库地址]</span><br></pre></td></tr></table></figure><h4 id="2-移出远程仓库"><a href="#2-移出远程仓库" class="headerlink" title="(2)移出远程仓库"></a>(2)移出远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove [别名](origin)</span><br></pre></td></tr></table></figure><h4 id="3-将本地仓库推送到远程仓库"><a href="#3-将本地仓库推送到远程仓库" class="headerlink" title="(3)将本地仓库推送到远程仓库"></a>(3)将本地仓库推送到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push [-u] [别名](origin) [分支名](master)<span class="comment">#-u表示第一次推送，后面推送可以不写</span></span><br><span class="line"></span><br><span class="line">推送所有分支</span><br><span class="line">git push --all [别名](origin)</span><br></pre></td></tr></table></figure><h4 id="4-从远程库更新内容到本地"><a href="#4-从远程库更新内容到本地" class="headerlink" title="(4)从远程库更新内容到本地"></a>(4)从远程库更新内容到本地</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [别名](origin) [分支名](master)</span><br></pre></td></tr></table></figure><p> <strong>如果push的时候，本地和文件和远端文件有冲突，就要先pull、然后手动解决冲突，才能继续push</strong> </p><h4 id="5-git记住用户密码"><a href="#5-git记住用户密码" class="headerlink" title="(5)git记住用户密码"></a>(5)git记住用户密码</h4><p> push的时候默认每次都需输入GitHub的用户名和密码，在git仓库根目录下.git文件夹的config文件末尾增加如下内容，即可记住用户名密码，无需每次推送都输入了 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[credential]</span><br><span class="line">     helper = store</span><br></pre></td></tr></table></figure><h3 id="14、克隆远程仓库"><a href="#14、克隆远程仓库" class="headerlink" title="14、克隆远程仓库"></a>14、克隆远程仓库</h3><p> 该命令可用于通过指定的URL获取一个代码库。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h3 id="15、查看某个版本历史记录"><a href="#15、查看某个版本历史记录" class="headerlink" title="15、查看某个版本历史记录"></a>15、查看某个版本历史记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --follow [file]</span><br></pre></td></tr></table></figure><h3 id="16、临时保存所有修改文件"><a href="#16、临时保存所有修改文件" class="headerlink" title="16、临时保存所有修改文件"></a>16、临时保存所有修改文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash save</span><br></pre></td></tr></table></figure><h3 id="17、恢复最近stash的文件"><a href="#17、恢复最近stash的文件" class="headerlink" title="17、恢复最近stash的文件"></a>17、恢复最近stash的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h3 id="18、显示stash所有变更"><a href="#18、显示stash所有变更" class="headerlink" title="18、显示stash所有变更"></a>18、显示stash所有变更</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><h3 id="19、丢弃最近一次变更"><a href="#19、丢弃最近一次变更" class="headerlink" title="19、丢弃最近一次变更"></a>19、丢弃最近一次变更</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文档-Hexo】butterfly 主题配置</title>
      <link href="/posts/1439774903/"/>
      <url>/posts/1439774903/</url>
      
        <content type="html"><![CDATA[<h1 id="butterfly安装与美化"><a href="#butterfly安装与美化" class="headerlink" title="butterfly安装与美化"></a>butterfly安装与美化</h1><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>Git:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>npm(hexo站点目录下):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><h3 id="1、启用主题"><a href="#1、启用主题" class="headerlink" title="1、启用主题"></a>1、启用主题</h3><p> 修改站点配置文件<code>_config.yml</code>，把主题改为 <code>Butterfly</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line">theme: Butterfly</span><br></pre></td></tr></table></figure><h3 id="2、安装插件"><a href="#2、安装插件" class="headerlink" title="2、安装插件"></a>2、安装插件</h3><p> 如果你沒有 pug 以及 stylus 的渲染器，请重新安装 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="3、升级建议"><a href="#3、升级建议" class="headerlink" title="3、升级建议"></a>3、升级建议</h3><p> 为了主题的平滑升级。</p><p> 推荐在hexo根目录创建一个文件<code>_config.butterfly.yml</code>,并把主题目录的<code>_config.yml</code>内容复制到新建的<code>config</code>文件里去。</p><p><strong>注意：</strong></p><ul><li>不要把主题目录的<code>_config.yml</code>文件删除。</li><li>之后的主题配置，在<code>_config.butterfly.yml</code>中进行。</li><li>hexo会自动合并主题的两个配置文件，<code>_config.butterfly.yml</code>优先级高。</li></ul><h3 id="4、主题页面"><a href="#4、主题页面" class="headerlink" title="4、主题页面"></a>4、主题页面</h3><p><strong>Front-matter</strong></p><ul><li><p>page Front-matter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//必需</span><br><span class="line">title: 页面标题</span><br><span class="line"><span class="built_in">date</span>: 页面创建时间</span><br><span class="line"><span class="built_in">type</span>: 标签、分类和友情链接页面需要配置</span><br><span class="line"></span><br><span class="line">//可选</span><br><span class="line">updated: 页面更新时间</span><br><span class="line">description: 页面描述</span><br><span class="line">keywords: 页面关键字</span><br><span class="line">comments: 显示页面评论模块(<span class="literal">true</span>)</span><br><span class="line">top_img: 页面顶部图片</span><br><span class="line">aside: 显示侧边栏(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></li><li><p>post Front-matter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//必需</span><br><span class="line">title: 页面标题</span><br><span class="line"><span class="built_in">date</span>: 页面创建时间</span><br><span class="line"></span><br><span class="line">//可选</span><br><span class="line">updated: 页面更新时间</span><br><span class="line">tags: 文章标签</span><br><span class="line">categories: 文章分类</span><br><span class="line">top_img: 页面顶部图片</span><br><span class="line">cover: 缩略图/顶部图</span><br><span class="line">description: 页面描述</span><br><span class="line">keywords: 页面关键字</span><br><span class="line">comments: 显示页面评论模块(<span class="literal">true</span>)</span><br><span class="line">aside: 显示侧边栏(<span class="literal">true</span>)</span><br><span class="line">toc:  是否显示toc （除非特定文章设置，可以不写）</span><br><span class="line">toc_number: 是否显示toc数字 （除非特定文章设置，可以不写）</span><br><span class="line">copyright: 是否显示版权 （除非特定文章设置，可以不写）</span><br></pre></td></tr></table></figure></li><li><p>标签页</p><ol><li>前往你的 <code>Hexo</code> 博客的根目录</li><li>输入 <code>hexo new page tags</code></li><li>你会找到 <code>source/tags/index.md</code> 这个文件</li><li>添加：<code>type: &quot;tags&quot;</code>字段</li></ol></li><li><p>分类页</p><ol><li>前往你的 <code>Hexo</code> 博客的根目录</li><li>输入 <code>hexo new page categories</code></li><li>你会找到 <code>source/categories/index.md</code> 这个文件</li><li>添加：<code>type: &quot;categories&quot;</code>字段</li></ol></li><li><p>友情链接</p><ol><li><p>前往你的 <code>Hexo</code> 博客的根目录</p></li><li><p>输入 <code>hexo new page link</code></p></li><li><p>你会找到 <code>source/link/index.md</code> 这个文件</p></li><li><p>添加：type: “link”字段</p></li><li><p>添加友链</p><p> 在 <code>Hexo</code> 博客目录中的 <code>source/_data</code>，创建一个文件 <code>link.yml</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- <span class="attr">class_name</span>: 友情鏈接</span><br><span class="line">  <span class="attr">class_desc</span>: 那些人，那些事</span><br><span class="line">  <span class="attr">link_list</span>:</span><br><span class="line">    - <span class="attr">name</span>: <span class="title class_">Hexo</span></span><br><span class="line">      <span class="attr">link</span>: <span class="attr">https</span>:<span class="comment">//hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar</span>: <span class="attr">https</span>:<span class="comment">//d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr</span>: 快速、簡單且強大的網誌框架</span><br><span class="line"></span><br><span class="line">- <span class="attr">class_name</span>: 網站</span><br><span class="line">  <span class="attr">class_desc</span>: 值得推薦的網站</span><br><span class="line">  <span class="attr">link_list</span>:</span><br><span class="line">    - <span class="attr">name</span>: <span class="title class_">Youtube</span></span><br><span class="line">      <span class="attr">link</span>: <span class="attr">https</span>:<span class="comment">//www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar</span>: <span class="attr">https</span>:<span class="comment">//i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr</span>: 視頻網站</span><br><span class="line">    - <span class="attr">name</span>: <span class="title class_">Weibo</span></span><br><span class="line">      <span class="attr">link</span>: <span class="attr">https</span>:<span class="comment">//www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar</span>: <span class="attr">https</span>:<span class="comment">//i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr</span>: 中國最大社交分享平臺</span><br><span class="line">    - <span class="attr">name</span>: <span class="title class_">Twitter</span></span><br><span class="line">      <span class="attr">link</span>: <span class="attr">https</span>:<span class="comment">//twitter.com/</span></span><br><span class="line">      <span class="attr">avatar</span>: <span class="attr">https</span>:<span class="comment">//i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr</span>: 社交分享平臺</span><br></pre></td></tr></table></figure><p> 由 2.2.0 起，友情鏈接界面可以由用戶自己自定義，只需要在友情鏈接的md檔設置就行，以普通的Markdown格式書寫。</p></li></ol></li></ul><h3 id="5、语言"><a href="#5、语言" class="headerlink" title="5、语言"></a>5、语言</h3><p>修改站点配置文件 <code>_config.yml</code></p><p>默认语言是 <code>en</code></p><p>主题支持三种语言</p><ul><li><code>default</code>(en)</li><li><code>zh-CN</code> (简体中文)</li><li><code>zh-TW</code> (繁体中文)</li></ul><h3 id="6、导航菜单"><a href="#6、导航菜单" class="headerlink" title="6、导航菜单"></a>6、导航菜单</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Home</span>(主页): / || fas fa-home</span><br><span class="line"><span class="title class_">Archives</span>(时间轴): <span class="regexp">/archives/</span> || fas fa-archive</span><br><span class="line"><span class="title class_">Tags</span>(标签): <span class="regexp">/tags/</span> || fas fa-tags</span><br><span class="line"><span class="title class_">Categories</span>(分类): <span class="regexp">/categories/</span> || fas fa-folder-open</span><br><span class="line"><span class="title class_">List</span>(清单)||fas fa-<span class="attr">list</span>:</span><br><span class="line">  <span class="title class_">Music</span>: <span class="regexp">/music/</span> || fas fa-music</span><br><span class="line">  <span class="title class_">Movie</span>: <span class="regexp">/movies/</span> || fas fa-video</span><br><span class="line"><span class="title class_">Link</span>(友情链接): <span class="regexp">/link/</span> || fas fa-link</span><br><span class="line"><span class="title class_">About</span>(关于笔者): <span class="regexp">/about/</span> || fas fa-heart</span><br></pre></td></tr></table></figure><blockquote><p> 菜单名称可自己修改 </p><p>名称： &#x2F;路径&#x2F; || icon</p></blockquote><h3 id="7、代码"><a href="#7、代码" class="headerlink" title="7、代码"></a>7、代码</h3><h4 id="1-代码高亮"><a href="#1-代码高亮" class="headerlink" title="(1)代码高亮"></a>(1)代码高亮</h4><p> <code>Butterfly</code> 支持6重代码高亮样式：</p><ul><li>darker</li><li>pale night</li><li>light</li><li>ocean</li><li>mac</li><li>mac light</li></ul><p> 修改 <code>主題配置文件</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_theme: light</span><br></pre></td></tr></table></figure><h4 id="2-代码复制"><a href="#2-代码复制" class="headerlink" title="(2)代码复制"></a>(2)代码复制</h4><p>主题支持代码复制功能</p><p> 修改 <code>主題配置文件</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_copy: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="3-代码框展开-x2F-关闭"><a href="#3-代码框展开-x2F-关闭" class="headerlink" title="(3)代码框展开&#x2F;关闭"></a>(3)代码框展开&#x2F;关闭</h4><p>在默认情况下，代码框自动展开</p><ul><li><code>true</code>：全部代码框不展示，需手动点击展示</li><li><code>false</code>：代码框展开，可手动关闭</li><li><code>none</code>：不展示<code>&gt;</code>按钮</li></ul><p> 修改 <code>主題配置文件</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_shrink: <span class="literal">true</span>/false/none <span class="comment">#代碼框不展開，需點擊 &#x27;&gt;&#x27; 打開</span></span><br></pre></td></tr></table></figure><h4 id="4-代码换行"><a href="#4-代码换行" class="headerlink" title="(4)代码换行"></a>(4)代码换行</h4><p>在默认情况下，<code>hexo</code>在编辑的时候是不会为代码换行的，如果你不想在代码框出现滚动条，则可设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code_word_wrap: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p> 找到你站点的 Hexo 配置文件<code>_config.yml</code>，将 <code>line_number</code> 改成 <code>false</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">false</span> <span class="comment"># &lt;- 改這裏</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">prismjs:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  preprocess: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">false</span> <span class="comment"># &lt;- 改這裏</span></span><br><span class="line">  tab_replace: <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="5-代码高度限制"><a href="#5-代码高度限制" class="headerlink" title="(5)代码高度限制"></a>(5)代码高度限制</h4><p>可配置代码高度限制，超出部分隐藏，并显示展开按钮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_height_limit: <span class="literal">false</span> <span class="comment"># unit: px</span></span><br></pre></td></tr></table></figure><h3 id="8、社交图标"><a href="#8、社交图标" class="headerlink" title="8、社交图标"></a>8、社交图标</h3><p> Butterfly支持 <a href="https://fontawesome.com/icons?from=io">font-awesome v6</a>图标。</p><p>格式：<code>图标明：url || 描述性文字</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:  </span><br><span class="line">fab fa-github: https://github.com/xxxxx || Github  </span><br><span class="line">fas fa-envelope: mailto:xxxxxx@gmail.com || Email</span><br></pre></td></tr></table></figure><h3 id="9、主页文章节选"><a href="#9、主页文章节选" class="headerlink" title="9、主页文章节选"></a>9、主页文章节选</h3><p> 因为主题 UI 的关系，主页文章节选只支持自动节选和文章页 description。优先选择自动节选。 </p><p> 在 <code>_config.butterfly.yml</code> 里可以开启 <code>auto_excerpt</code> 的选项，你的文章将会在自动截取部分显示在主页。 </p><ol><li><strong>description：</strong> 只顯示description</li><li><strong>both：</strong> 優先選擇description，如果沒有配置description，則顯示自動節選的內容</li><li><strong>auto_excerpt：</strong>只顯示自動節選</li><li><strong>false：</strong> 不顯示文章內容</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index_post_content:  </span><br><span class="line">method: 3  </span><br><span class="line">length: 500 # if you set method to 2 or 3, the length need to config</span><br></pre></td></tr></table></figure><h3 id="10、顶部图"><a href="#10、顶部图" class="headerlink" title="10、顶部图"></a>10、顶部图</h3><h4 id="1-page页"><a href="#1-page页" class="headerlink" title="(1)page页"></a>(1)page页</h4><p>在主题配置文件 <code>_config.butterfly.yml</code> 设置。</p><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>index_img</td><td>主页的 top_img</td></tr><tr><td>default_top_img</td><td><strong>默认的 top_img，当页面的 top_img 沒有配置时，会显示 default_top_img</strong></td></tr><tr><td>archive_img</td><td>时间轴页面的 top_img</td></tr><tr><td>tag_img</td><td>tag 子页面 的 默认 top_img</td></tr><tr><td>tag_per_img</td><td>tag 子页面的 top_img，可配置每個 tag 的 top_img</td></tr><tr><td>category_img</td><td>category 子页面 的 默认 top_img</td></tr><tr><td>category_per_img</td><td>category 子页面的 top_img，可配置每个category 的 top_img</td></tr></tbody></table><p> 其它页面 （tags&#x2F;categories&#x2F;自建页面）和 文章页 的 <code>top_img</code> ，请到对应的 md 页面设置<code>front-matter</code>中的<code>top_img</code> </p><h4 id="2-post页"><a href="#2-post页" class="headerlink" title="(2)post页"></a>(2)post页</h4><p> <code>post</code> 页的顶部图会优先显示各自 <code>front-matter</code> 中的 <code>top_img</code>, 如果没有设置，则会缩略图（即各自 <code>front-matter</code> 中的 <code>cover</code>)，如果没有则会显示显示 <code>default_top_img</code> 图片 </p><h3 id="11、文章置顶"><a href="#11、文章置顶" class="headerlink" title="11、文章置顶"></a>11、文章置顶</h3><p> <a href="https://github.com/hexojs/hexo-generator-index"><code>hexo-generator-index</code></a>从 2.0.0 开始，已经支持文章置顶功能。你可以直接在文章的<code>front-matter</code>区域添加<code>sticky: 1</code>属性来把这篇文章置顶。数值越大，置顶的优先級越大。 </p><h3 id="12、文章封面"><a href="#12、文章封面" class="headerlink" title="12、文章封面"></a>12、文章封面</h3><p>文章的markdown文档上,在<code>Front-matter</code>添加<code>cover</code>,并填上要显示的图片地址。<br>如果不配置<code>cover</code>,可以设置显示默认的<code>cover</code>.</p><p>如果不想在首页显示cover,可以设置为<code>false</code>，修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cover:  <span class="comment"># 是否显示文章封面  </span></span><br><span class="line">index_enable: <span class="literal">true</span>  </span><br><span class="line">aside_enable: <span class="literal">true</span>  </span><br><span class="line">archives_enable: <span class="literal">true</span>  </span><br><span class="line"><span class="comment"># 封面显示的位置  </span></span><br><span class="line"><span class="comment"># 三個值可配置 left , right , both  </span></span><br><span class="line">position: both  //轮换左右</span><br><span class="line"><span class="comment"># 當沒有設置cover時，默認的封面顯示  </span></span><br><span class="line">default_cover: </span><br></pre></td></tr></table></figure><h3 id="13、文章页相关配置"><a href="#13、文章页相关配置" class="headerlink" title="13、文章页相关配置"></a>13、文章页相关配置</h3><h4 id="1-文章meta显示"><a href="#1-文章meta显示" class="headerlink" title="(1)文章meta显示"></a>(1)文章meta显示</h4><p> 这个选项是用来显示文章的相关信息的。 </p><p> 修改 <code>主題配置文件</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">post_meta:  </span><br><span class="line">page:    </span><br><span class="line">date_type: both <span class="comment">#created or updated or both 主頁文章日期是创建日或者更新日或都显示    </span></span><br><span class="line">date_format: relative <span class="comment"># date/relative 显示日期还是相对日期    </span></span><br><span class="line">categories: <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类    </span></span><br><span class="line">tags: <span class="literal">true</span> <span class="comment"># true or false 主页是否显示标签    </span></span><br><span class="line">label: <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字  </span></span><br><span class="line">post:    </span><br><span class="line">date_type: both <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都顯示    </span></span><br><span class="line">date_format: relative <span class="comment"># date/relative 显示日期还是相对日期    </span></span><br><span class="line">categories: <span class="literal">true</span> <span class="comment"># true or false 文章頁是否顯示分類    </span></span><br><span class="line">tags: <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标签    </span></span><br><span class="line">label: <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br></pre></td></tr></table></figure><h4 id="2-文章版权"><a href="#2-文章版权" class="headerlink" title="(2)文章版权"></a>(2)文章版权</h4><p> 为你的博客文章展示文章版权和许可协议。配置 <code>butterfly.yml</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_copyright:  </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>  <span class="comment">#显示版权权</span></span><br><span class="line">decode: <span class="literal">false</span>  </span><br><span class="line">author_href:  </span><br><span class="line">license: CC BY-NC-SA 4.0  </span><br><span class="line">license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></pre></td></tr></table></figure><p> 如果有文章（例如：转载文章）不需要显示版权，可以在文章 <code>Front-matter</code> 单独设置 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copyright: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p> 从<code>3.0.0</code>开始，支持对单独文章设置版权信息，可以在文章<code>Front-matter</code>单独設置 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copyright_author: xxxx</span><br><span class="line">copyright_author_href: https://xxxxxx.com</span><br><span class="line">copyright_url: https://xxxxxx.com</span><br><span class="line">copyright_info: 此文章版权归xxxxx所有，如有转载，请注明來自原作者</span><br></pre></td></tr></table></figure><h4 id="3-文章打赏"><a href="#3-文章打赏" class="headerlink" title="(3)文章打赏"></a>(3)文章打赏</h4><p> 在你每篇文章的结尾，可以添加打赏按钮。相关二维码可以自行配置 <code>butterfly.yml</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">reward:  </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>  </span><br><span class="line">QR_code:    </span><br><span class="line">- img: /img/wechat.jpg      </span><br><span class="line"><span class="built_in">link</span>:      </span><br><span class="line">text: 微信    </span><br><span class="line">- img: /img/alipay.jpg      </span><br><span class="line"><span class="built_in">link</span>:      </span><br><span class="line">text: 支付宝</span><br></pre></td></tr></table></figure><h3 id="14、TOC"><a href="#14、TOC" class="headerlink" title="14、TOC"></a>14、TOC</h3><p> 在文章页，会有一个目录，用于显示 TOC。 手机端默认显示按钮。 </p><p> 配置 <code>butterfly.yml</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">toc:  </span><br><span class="line">post: true  </span><br><span class="line">page: false  </span><br><span class="line">number: true  #显示张数</span><br><span class="line">expand: false  </span><br><span class="line">style_simple: false  # for post</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>post</td><td>文章页是否显示 TOC</td></tr><tr><td>page</td><td>普通页面是否显示 TOC</td></tr><tr><td>number</td><td>是否显示章字数</td></tr><tr><td>expand</td><td>是否展开 TOC</td></tr><tr><td>style_simple</td><td>简洁模式</td></tr></tbody></table><ul><li><p><strong>为特定的文章配置</strong></p><p> 在你的文章<code>md</code>文件的頭部，加入<code>toc_number</code>和<code>toc</code>，並配置<code>true</code>或者<code>false</code>即可。 (优先级高)</p></li><li><p><strong>相关文章</strong></p><p> 相关文章推荐的原理是根据文章tags的比重來推荐。 修改 <code>主題配置文件</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">related_post:  </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>  </span><br><span class="line"><span class="built_in">limit</span>: 6 <span class="comment"># 显示推荐文章数目  </span></span><br><span class="line">date_type: created  <span class="comment"># or created or updated 文章日期显示创建日或者更新日</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://butterfly.js.org/posts/4aa8abbe/">文章锚点</a></p></li><li><p><a href="https://butterfly.js.org/posts/4aa8abbe/">文章过期提醒</a></p></li><li><p><a href="https://butterfly.js.org/posts/4aa8abbe/">文章编辑按钮</a></p></li><li><p><a href="https://butterfly.js.org/posts/4aa8abbe/">文章分页按钮</a></p></li></ul><h3 id="15、头像"><a href="#15、头像" class="headerlink" title="15、头像"></a>15、头像</h3><p> 修改 <code>主題配置文件</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">avatar:  </span><br><span class="line">img: /img/avatar.png  <span class="comment">#img为主题文件下/source/img</span></span><br><span class="line">effect: <span class="literal">true</span> <span class="comment"># 頭像會一直轉圈</span></span><br></pre></td></tr></table></figure><h3 id="16、图片描述"><a href="#16、图片描述" class="headerlink" title="16、图片描述"></a>16、图片描述</h3><p>可开放图片Figcaption描述文字描示</p><p>首先显示圖图片的 title 屬性，然后是 alt 屬性</p><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">photofigcaption: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="17、复制相关配置"><a href="#17、复制相关配置" class="headerlink" title="17、复制相关配置"></a>17、复制相关配置</h3><p> 可配置网站是否可以复制、复制的內容是否添加版权信息 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy settings</span></span><br><span class="line"><span class="comment"># copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)</span></span><br><span class="line">copy:  </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>  </span><br><span class="line">copyright:    </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>    </span><br><span class="line">limit_count: 50</span><br></pre></td></tr></table></figure><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>enable</td><td>是否开放网站复制权限</td></tr><tr><td>copyright</td><td>复制的內容后面加上版权信息</td></tr><tr><td>enable</td><td>是否开放复制版权信息添加</td></tr><tr><td>limit_count</td><td>字数限制，当复制文字大于这个字数限制时，將在复制的內容后面加上版权信息</td></tr></tbody></table><h3 id="18、Footer设置"><a href="#18、Footer设置" class="headerlink" title="18、Footer设置"></a>18、Footer设置</h3><h4 id="1-博客年份"><a href="#1-博客年份" class="headerlink" title="(1)博客年份"></a>(1)博客年份</h4><p> since 是一个来展示你站点起始时间的选项。它位于页面的最底部。 </p><p> 配置 <code>_config.butterfly.yml</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">footer:  </span><br><span class="line">owner:    </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>    </span><br><span class="line">since: 2018</span><br><span class="line">custom_text: </span><br><span class="line">copyright: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-页脚自定义文字"><a href="#2-页脚自定义文字" class="headerlink" title="(2)页脚自定义文字"></a>(2)页脚自定义文字</h4><p> <code>custom_text</code> 是一个给你用来在页脚自定义文本的选项。通常你可以在这里写声明文本等。支持 HTML。  修改 <code>主題配置文件</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">custom_text: Hi, welcome to my <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://butterfly.js.org/&quot;</span>&gt;</span>blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span>!</span><br></pre></td></tr></table></figure><h4 id="3-ICP"><a href="#3-ICP" class="headerlink" title="(3)ICP"></a>(3)ICP</h4><p>对于部分有备案的域名，可以在 ICP 配置显示。</p><p>配置 <code>_cofig.butterfly.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ICP:  </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>  </span><br><span class="line">url: http://www.beian.miit.gov.cn/  </span><br><span class="line">text: 粤ICP备xxxx  </span><br><span class="line">icon: /img/icp.png </span><br></pre></td></tr></table></figure><h3 id="19、右下角按钮"><a href="#19、右下角按钮" class="headerlink" title="19、右下角按钮"></a>19、右下角按钮</h3><h4 id="1-简繁转换"><a href="#1-简繁转换" class="headerlink" title="(1)简繁转换"></a>(1)简繁转换</h4><p>右下角会有简繁转换按钮。</p><p>配置 <code>_config.butterfly.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">translate:  </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>  <span class="comment"># 默认按钮显示文字</span></span><br><span class="line">default: 简  <span class="comment">#网站是简体，应设置为&#x27;default: 繁&#x27;</span></span><br><span class="line">defaultEncoding: 1  <span class="comment">#网站默认语言，1: 繁体中文, 2: 简体中文</span></span><br><span class="line">translateDelay: 0  <span class="comment">#延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">cookieDomain: <span class="string">&quot;https://jerryc.me/&quot;</span><span class="comment">#博客网址</span></span><br><span class="line">msgToTraditionalChinese: <span class="string">&quot;繁&quot;</span>  <span class="comment">#当文字是简体时，按钮显示的文字</span></span><br><span class="line">    msgToSimplifiedChinese: <span class="string">&quot;簡&quot;</span><span class="comment">#当文字是繁体时，按钮显示的文字</span></span><br></pre></td></tr></table></figure><h4 id="2-夜间模式"><a href="#2-夜间模式" class="headerlink" title="(2)夜间模式"></a>(2)夜间模式</h4><p>右下角会有夜间模式按钮</p><p>配置 <code>_config.butterfly.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line">darkmode:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># dark mode和 light mode切換按鈕</span></span><br><span class="line">  button: <span class="literal">true</span></span><br><span class="line">  autoChangeMode: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="3-阅读模式"><a href="#3-阅读模式" class="headerlink" title="(3)阅读模式"></a>(3)阅读模式</h4><p>阅读模式下会去掉除文章外的内容，避免干扰阅读。</p><p>只会出现在文章页面，右下角会有阅读模式按钮。</p><p>配置 <code>_config.butterfly.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readmode: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4-按钮排序"><a href="#4-按钮排序" class="headerlink" title="(4)按钮排序"></a><a href="https://butterfly.js.org/posts/4aa8abbe/">(4)按钮排序</a></h4><h3 id="20、侧边栏设置"><a href="#20、侧边栏设置" class="headerlink" title="20、侧边栏设置"></a>20、侧边栏设置</h3><p> 可自行决定哪个项目需要显示，可决定位置。（至少需要显示一个） </p><h4 id="1-侧边排版"><a href="#1-侧边排版" class="headerlink" title="(1)侧边排版"></a>(1)侧边排版</h4><p>配置 <code>_config.butterfly.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">aside:  </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>  </span><br><span class="line">hide: <span class="literal">false</span>  </span><br><span class="line">button: <span class="literal">true</span>  </span><br><span class="line">mobile: <span class="literal">true</span> <span class="comment"># 手機頁面（ 顯示寬度 &lt; 768px ）是否顯示aside內容  </span></span><br><span class="line">position: right <span class="comment"># left or right  </span></span><br><span class="line">archives: <span class="literal">true</span>  </span><br><span class="line">card_author:    </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>    </span><br><span class="line">description:    </span><br><span class="line">button:      </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>  </span><br><span class="line">icon: fab fa-github      </span><br><span class="line">text: Github      </span><br><span class="line"><span class="built_in">link</span>: https://github.com/jerryc127/hexo-theme-butterfly  </span><br><span class="line">card_announcement:    </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>    </span><br><span class="line">content: This is my Blog  </span><br><span class="line">card_recent_post:    </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>    </span><br><span class="line"><span class="built_in">limit</span>: 5 <span class="comment"># if set 0 will show all    </span></span><br><span class="line"><span class="built_in">sort</span>: <span class="built_in">date</span> <span class="comment"># date or updated  </span></span><br><span class="line">card_categories:    </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>    </span><br><span class="line"><span class="built_in">limit</span>: 8 <span class="comment"># if set 0 will show all    </span></span><br><span class="line"><span class="built_in">expand</span>: none <span class="comment"># none/true/false  </span></span><br><span class="line">card_tags:    </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>    </span><br><span class="line"><span class="built_in">limit</span>: 40 <span class="comment"># if set 0 will show all    </span></span><br><span class="line">color: <span class="literal">false</span>  </span><br><span class="line">card_archives:    </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>   </span><br><span class="line">        <span class="built_in">type</span>: monthly <span class="comment"># yearly or monthly    </span></span><br><span class="line">        format: MMMM YYYY <span class="comment"># eg: YYYY年MM月    </span></span><br><span class="line">        order: -1 <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending    </span></span><br><span class="line">        <span class="built_in">limit</span>: 8 <span class="comment"># if set 0 will show all  </span></span><br><span class="line">     card_webinfo:    </span><br><span class="line">     <span class="built_in">enable</span>: <span class="literal">true</span>    </span><br><span class="line">     post_count: <span class="literal">true</span>    </span><br><span class="line">     last_push_date: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-访问人数"><a href="#2-访问人数" class="headerlink" title="(2)访问人数"></a>(2)访问人数</h4><p> 修改 <code>主題配置文件</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">busuanzi:  </span><br><span class="line">site_uv: <span class="literal">true</span>  </span><br><span class="line">site_pv: <span class="literal">true</span>  </span><br><span class="line">page_pv: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="3-运行时间"><a href="#3-运行时间" class="headerlink" title="(3)运行时间"></a>(3)运行时间</h4><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">runtimeshow:</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  publish_date: 6/7/2018 00:00:00  </span><br><span class="line">  <span class="comment">##網頁開通時間</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 時間</span></span><br><span class="line">  <span class="comment">#也可以寫成 年/月/日 時間</span></span><br></pre></td></tr></table></figure><h4 id="4-最新评论"><a href="#4-最新评论" class="headerlink" title="(4)最新评论"></a>(4)<a href="https://butterfly.js.org/posts/4aa8abbe/">最新评论</a></h4><h3 id="21、标签外挂"><a href="#21、标签外挂" class="headerlink" title="21、标签外挂"></a>21、标签外挂</h3><p> 修改 <code>主題配置文件</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  style: simple</span><br><span class="line">  icons: <span class="literal">false</span></span><br><span class="line">  border_radius: 3</span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure><p> <code>icons</code>和<code>light_bg_offset</code>只对<em>方法一</em>生效 </p><h3 id="22、Gallery相册-and-other"><a href="#22、Gallery相册-and-other" class="headerlink" title="22、Gallery相册 and other"></a>22、<a href="https://butterfly.js.org/posts/4aa8abbe/">Gallery相册 and other</a></h3><h3 id="23、评论"><a href="#23、评论" class="headerlink" title="23、评论"></a>23、评论</h3><p> 支持双评论显示，只需要配置兩個评论（第一個為默认显示） </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo</span></span><br><span class="line">  use: Valine,Disqus</span><br><span class="line">  text: <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  lazyload: <span class="literal">true</span></span><br><span class="line">  count: <span class="literal">true</span> <span class="comment"># Display comment count in top_img</span></span><br><span class="line">  card_post_count: <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>參數</th><th>解釋</th></tr></thead><tbody><tr><td>use</td><td>使用的評論（請注意，最多支持兩個，如果不需要請留空） <em>注意：雙評論不能是 Disqus 和 Disqusjs 一起，由於其共用同一個 ID，會出錯</em></td></tr><tr><td>text</td><td>是否顯示評論服務商的名字</td></tr><tr><td>lazyload</td><td>是否為評論開啟lazyload，開啟後，只有滾動到評論位置時才會加載評論所需要的資源（<em>開啟 lazyload 後，評論數將不顯示</em>）</td></tr><tr><td>count</td><td>是否在文章頂部顯示評論數 livere、Giscus 和 utterances 不支持評論數顯示</td></tr><tr><td>card_post_count</td><td>是否在首頁文章卡片顯示評論數 gitalk、livere 、Giscus 和 utterances 不支持評論數顯示</td></tr></tbody></table><h3 id="24、在线聊天"><a href="#24、在线聊天" class="headerlink" title="24、在线聊天"></a>24、<a href="https://butterfly.js.org/posts/ceeb73f/">在线聊天</a></h3><h3 id="25、分享"><a href="#25、分享" class="headerlink" title="25、分享"></a>25、分享</h3><p> 修改 <code>主題配置文件</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addThis:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># or false</span></span><br><span class="line">  pubid: 你的pub-id</span><br></pre></td></tr></table></figure><h3 id="26、搜索系统"><a href="#26、搜索系统" class="headerlink" title="26、搜索系统"></a>26、搜索系统</h3><ol><li>你需要安裝 <a href="https://github.com/oncletom/hexo-algolia">hexo-algolia</a>或 <a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearch</a>. 根據它們的説明文檔去做相應的配置。</li><li>修改 <code>主題配置文件</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">algolia_search:  </span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span>  </span><br><span class="line">hits:    </span><br><span class="line">per_page: 6</span><br></pre></td></tr></table></figure><h3 id="27、others"><a href="#27、others" class="headerlink" title="27、others"></a>27、others</h3><ul><li><a href="https://butterfly.js.org/posts/ceeb73f/">网站验证</a></li><li><a href="https://butterfly.js.org/posts/ceeb73f/">分析系统</a></li><li><a href="https://butterfly.js.org/posts/ceeb73f/">广告</a></li><li><a href="https://butterfly.js.org/posts/ceeb73f/">Math数学</a></li></ul><h2 id="三、美化-x2F-特效"><a href="#三、美化-x2F-特效" class="headerlink" title="三、美化&#x2F;特效"></a>三、美化&#x2F;特效</h2><h3 id="1、自定义主题色"><a href="#1、自定义主题色" class="headerlink" title="1、自定义主题色"></a>1、自定义主题色</h3><p>可以修改大部分UI顏色</p><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">theme_color:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  main: <span class="string">&quot;#49B1F5&quot;</span></span><br><span class="line">  paginator: <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  button_hover: <span class="string">&quot;#FF7242&quot;</span></span><br><span class="line">  text_selection: <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  link_color: <span class="string">&quot;#99a9bf&quot;</span></span><br><span class="line">  meta_color: <span class="string">&quot;#858585&quot;</span></span><br><span class="line">  hr_color: <span class="string">&quot;#A4D8FA&quot;</span></span><br><span class="line">  code_foreground: <span class="string">&quot;#F47466&quot;</span></span><br><span class="line">  code_background: <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line">  toc_color: <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  blockquote_padding_color: <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  blockquote_background_color: <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  scrollbar_color: <span class="string">&quot;#49b1f5&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2、网站背景"><a href="#2、网站背景" class="headerlink" title="2、网站背景"></a>2、网站背景</h3><p>默认显示白色，可設置图片或者颜色</p><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 圖片格式 url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="comment"># 顏色（HEX值/RGB值/顔色單詞/漸變色)</span></span><br><span class="line"><span class="comment"># 留空 不顯示背景</span></span><br><span class="line">background:</span><br></pre></td></tr></table></figure><h3 id="3、footer背景"><a href="#3、footer背景" class="headerlink" title="3、footer背景"></a>3、footer背景</h3><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># footer是否显示图片背景(與top_img一致)</span></span><br><span class="line">footer_bg: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="4、打字效果"><a href="#4、打字效果" class="headerlink" title="4、打字效果"></a>4、打字效果</h3><p>打字效果<a href="https://github.com/disjukr/activate-power-mode">activate-power-mode</a></p><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">打字效果activate-power-mode</span><br><span class="line">修改 主題配置文件</span><br><span class="line"><span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line"><span class="comment"># https://github.com/disjukr/activate-power-mode</span></span><br><span class="line">activate_power_mode:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  colorful: <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  shake: <span class="literal">true</span> <span class="comment">#  open shake (抖動特效)</span></span><br><span class="line">  mobile: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="5、背景特效"><a href="#5、背景特效" class="headerlink" title="5、背景特效"></a>5、背景特效</h3><p>好看的彩帶背景，可設置每次刷新更换彩帶，或者每点击更换彩帶<br>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  size: 150</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br><span class="line">  click_to_change: <span class="literal">false</span>  <span class="comment">#設置是否每次點擊都更換綵帶</span></span><br><span class="line">  mobile: <span class="literal">false</span> <span class="comment"># false 手機端不顯示 true 手機端顯示</span></span><br></pre></td></tr></table></figure><h3 id="6、鼠标点击效果"><a href="#6、鼠标点击效果" class="headerlink" title="6、鼠标点击效果"></a>6、鼠标点击效果</h3><p><code>zIndex</code>建议只在<code>-1</code>和<code>9999</code>上选<br><code>-1</code> 代表焰火效果在底部<br><code>9999</code> 代表焰火效果在前面</p><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fireworks:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  zIndex: 9999 <span class="comment"># -1 or 9999</span></span><br><span class="line">  mobile: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">click_heart:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mobile: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">ClickShowText:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  text: </span><br><span class="line">    - 富强</span><br><span class="line">    - 民主</span><br><span class="line">...</span><br><span class="line">  fontSize: 15px</span><br></pre></td></tr></table></figure><h3 id="7、页面美化"><a href="#7、页面美化" class="headerlink" title="7、页面美化"></a>7、页面美化</h3><p>会改变 ol、ul、h1-h5 的样式</p><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 美化頁面顯示</span></span><br><span class="line">beautify:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  field: site <span class="comment"># site/post</span></span><br><span class="line">  title-prefix-icon: <span class="string">&#x27;\f0c1&#x27;</span></span><br><span class="line">  title-prefix-icon-color: <span class="string">&quot;#F47466&quot;</span></span><br></pre></td></tr></table></figure><p> <code>title-prefix-icon</code> 填写的是 fontawesome 的 icon 的 Unicode 数 </p><h3 id="8、自定义字体和大小"><a href="#8、自定义字体和大小" class="headerlink" title="8、自定义字体和大小"></a>8、自定义字体和大小</h3><h4 id="1-全体字体"><a href="#1-全体字体" class="headerlink" title="(1)全体字体"></a>(1)全体字体</h4><p>可自行设置字体的<code>font-family</code><br><strong>如不需要配置，请留空</strong></p><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line">font:</span><br><span class="line">  global-font-size:</span><br><span class="line">  code-font-size:</span><br><span class="line">  font-family: -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, Lato, Roboto, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, sans-serif</span><br><span class="line">  code-font-family: consolas, Menlo, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, sans-serif</span><br></pre></td></tr></table></figure><h4 id="2-blog标签字体"><a href="#2-blog标签字体" class="headerlink" title="(2)blog标签字体"></a>(2)blog标签字体</h4><p>可自行设置字体的<code>font-family</code><br><strong>如不需要配置，请留空。</strong><br><strong>如不需要使用网络字体，只需要把font_link留空就行</strong></p><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Font settings for the site title and site subtitle</span></span><br><span class="line"><span class="comment"># 左上角網站名字 主頁居中網站名字</span></span><br><span class="line">blog_title_font:</span><br><span class="line">  font_link: https://fonts.googleapis.com/css?family=Titillium+Web&amp;display=swap</span><br><span class="line">  font-family: Titillium Web, <span class="string">&#x27;PingFang SC&#x27;</span>, <span class="string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="string">&#x27;Microsoft JhengHei&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif</span><br></pre></td></tr></table></figure><h4 id="3-网站副标题"><a href="#3-网站副标题" class="headerlink" title="(3)网站副标题"></a>(3)网站副标题</h4><p>可设置主页中显示的网站副标题或者喜欢的座右銘。</p><p>修改 <code>主題配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主頁subtitle</span></span><br><span class="line">subtitle:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  effect: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  loop: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="built_in">source</span>: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  sub:</span><br><span class="line">    - 今日事&amp;<span class="comment">#44;今日畢</span></span><br><span class="line">    - Never put off till tomorrow what you can <span class="keyword">do</span> today</span><br></pre></td></tr></table></figure><h4 id="4-主页top-img显示大小"><a href="#4-主页top-img显示大小" class="headerlink" title="(4)主页top_img显示大小"></a>(4)主页top_img显示大小</h4><p> 默認的顯示為全屏。site-info的區域會居中顯示 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主頁設置</span></span><br><span class="line"><span class="comment"># 默認top_img全屏，site_info在中間</span></span><br><span class="line"><span class="comment"># 使用默認, 都無需填寫（建議默認）</span></span><br><span class="line">index_site_info_top: <span class="comment"># 主頁標題距離頂部距離  例如 300px/300em/300rem/10%</span></span><br><span class="line">index_top_img_height:  <span class="comment">#主頁top_img高度 例如 300px/300em/300rem  不能使用百分比</span></span><br></pre></td></tr></table></figure><p> 注意：<code>index_top_img_height</code>的值不能使用百分比。 </p><h4 id="5-页面加载动画"><a href="#5-页面加载动画" class="headerlink" title="(5)页面加载动画"></a>(5)页面加载动画</h4><p> 當進入網頁時，因為加載速度的問題，可能會導致top_img圖片出現斷層顯示，或者網頁加載不全而出現等待時間，開啟preloader後，會顯示加載動畫，等頁面加載完，加載動畫會消失。 </p><p>配置<code>butterly.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加載動畫 Loading Animation</span></span><br><span class="line">preloader: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="6-字数统计"><a href="#6-字数统计" class="headerlink" title="(6)字数统计"></a>(6)字数统计</h4><p>要为<code>Butterfly</code>配上字数統計特性, 你需要如下几個步骤:</p><ol><li><p>打開 hexo 工作目录</p></li><li><p><code>npm install hexo-wordcount --save</code> or <code>yarn add hexo-wordcount</code></p></li><li><p>修改 <code>主題配置文件</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wordcount:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  post_wordcount: <span class="literal">true</span></span><br><span class="line">  min2read: <span class="literal">true</span></span><br><span class="line">  total_wordcount: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="9、其他"><a href="#9、其他" class="headerlink" title="9、其他"></a>9、<a href="https://butterfly.js.org/posts/ceeb73f/">其他</a></h3><h2 id="四、其他配置"><a href="#四、其他配置" class="headerlink" title="四、其他配置"></a>四、其他配置</h2><h3 id="1、文章添加加密功能"><a href="#1、文章添加加密功能" class="headerlink" title="1、文章添加加密功能"></a>1、文章添加加密功能</h3><p><strong>下载相关依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-encrypt --save</span><br></pre></td></tr></table></figure><p>配置hexo根目录的<code>_config.yml</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该密码为全局默认密码</span></span><br><span class="line"><span class="comment">#--------------为文章设置密码</span></span><br><span class="line">encrypt:</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  password: ****<span class="comment">#默认密码</span></span><br></pre></td></tr></table></figure><p>也可以为单独的文章设置：</p><p>post font-matter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">encrypt: <span class="literal">true</span>/false</span><br><span class="line">password: ***</span><br><span class="line">message: 描述字段</span><br></pre></td></tr></table></figure><h3 id="2、图片懒加载"><a href="#2、图片懒加载" class="headerlink" title="2、图片懒加载"></a>2、图片懒加载</h3><p>配置<code>主题文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lazyload:</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">loadingImg: ***<span class="comment">#图片加载完之前显示的图片</span></span><br></pre></td></tr></table></figure><h3 id="3、代码压缩"><a href="#3、代码压缩" class="headerlink" title="3、代码压缩"></a>3、代码压缩</h3><p>下载相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure><p>配置hexo根目录<code>_config.yml</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代码压缩</span></span><br><span class="line"><span class="comment">#-----------------</span></span><br><span class="line">all_minifier: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">html_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  ignore_error: <span class="literal">false</span></span><br><span class="line">  exclude:</span><br><span class="line"></span><br><span class="line">css_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"></span><br><span class="line">js_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line">image_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># 图片不压缩</span></span><br><span class="line">  interlaced: <span class="literal">false</span></span><br><span class="line">  multipass: <span class="literal">false</span></span><br><span class="line">  optimizationLevel: 2</span><br><span class="line">  pngquant: <span class="literal">false</span></span><br><span class="line">  progressive: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="4、配置滚动条"><a href="#4、配置滚动条" class="headerlink" title="4、配置滚动条"></a>4、配置滚动条</h3><p>在<code>主题目录的source/css</code>添加<code>normalize.css</code>文件。</p><p>代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/* 滚动条 */</span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: 4px;</span><br><span class="line">    height: 4px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    background-color: rgba(121,106,128, 0.2);</span><br><span class="line">    border-radius: 2em;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    background-color: rgba(178,110,131,1);</span><br><span class="line">    /*background-image: -webkit-linear-gradient(*/</span><br><span class="line">    /*        45deg,*/</span><br><span class="line">    /*        rgba(255, 255, 255, 0.4) 25%,*/</span><br><span class="line">    /*        transparent 25%,*/</span><br><span class="line">    /*        transparent 50%,*/</span><br><span class="line">    /*        rgba(255, 255, 255, 0.4) 50%,*/</span><br><span class="line">    /*        rgba(255, 255, 255, 0.4) 75%,*/</span><br><span class="line">    /*        transparent 75%,*/</span><br><span class="line">    /*        transparent*/</span><br><span class="line">    /*);*/</span><br><span class="line">    border-radius: 2em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">    color: <span class="comment">#fff;</span></span><br><span class="line">    background-color: <span class="comment">#49b1f5;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置主题的<code>_config.butterfly.yml</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  <span class="built_in">head</span>:<span class="comment">#引入你的normalize.css</span></span><br><span class="line">    - &lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/css/flink.min.css&quot;</span>&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/hideMobileSidebar.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="5、设置文章访问目录设置"><a href="#5、设置文章访问目录设置" class="headerlink" title="5、设置文章访问目录设置"></a>5、设置文章访问目录设置</h3><p>下载依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#permalink_defaults:</span></span><br><span class="line">permalink: posts/:abbrlink/</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32 <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  rep: dec   <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面经】椭圆方程一面</title>
      <link href="/posts/651495063/"/>
      <url>/posts/651495063/</url>
      
        <content type="html"><![CDATA[<h1 id="1、自我介绍。"><a href="#1、自我介绍。" class="headerlink" title="1、自我介绍。"></a>1、自我介绍。</h1><p>我是***，来自***大学计算机科学学院的软件工程专业的23届学生。在校选修了***专业…，并自学了前端相关知识，像：<code>html</code>、<code>css</code>、<code>js</code>和选学的 <code>react</code> 框架。在学习中，也利用自己学习的前端知识做了一些小项目，如***、***。【有些公司会比较看注你在学校里的一些经历，比如是否参加过团队或社团组织、参加过什么专业相关的比赛、是否和导师做过什么项目等。有就可以简要说一下。】</p><h1 id="2、专业知识"><a href="#2、专业知识" class="headerlink" title="2、专业知识"></a>2、专业知识</h1><h2 id="1-你学习的是react，那你对react了解多少？"><a href="#1-你学习的是react，那你对react了解多少？" class="headerlink" title="(1)你学习的是react，那你对react了解多少？"></a>(1)你学习的是react，那你对react了解多少？</h2><p><code>React</code> 就是 <code>Facebook</code> 的一个开源的、 用于构建用户界面的 <code>JS</code> 框架，专注的层面为<code>View</code>层，不包括数据访问层或者那种<code>Hash</code>路由。 <code>React</code> 专注的中心是 <code>Component</code>，即组件。 <code>React</code> 认为一切页面元素都可以抽象成组件，比如一个表单，或者表单中的某一项。</p><p><strong><code>React</code>有以下特点：</strong></p><ul><li>声明式设计：  <code>React</code>采用声明范式，可以轻松描述应用。 </li><li>高效：  <code>React</code>通过对DOM的模拟，最大限度地减少与DOM的交互。 </li><li>灵活 ：  <code>React</code>可以与已知的库或框架很好地配合。 </li><li><code>JSX</code>：   <code>JSX</code> 是 <code>JavaScript</code> 语法的扩展。 </li><li>组件：  通过 <code>React</code> 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li><li>单向响应的数据流 ：  <code>React</code> 实现了单向响应的数据流，从而减少了重复代码。</li></ul><h2 id="2-你用过那些react的钩子，说一下具体作用呢？"><a href="#2-你用过那些react的钩子，说一下具体作用呢？" class="headerlink" title="(2)你用过那些react的钩子，说一下具体作用呢？"></a>(2)你用过那些<code>react</code>的钩子，说一下具体作用呢？</h2><p>面试的时候没反应过来，以为面试官说的是 <code>hooks</code> 里面的钩子，就回答了：<code>useState</code>、<code>useEffect</code>、<code>useContext</code>、<code>useReducer</code>、<code>useCallback</code>。</p><p>结果面试官的意思是问<code>react</code>的生命周期钩子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//react生命周期主要分为三个阶段：</span></span><br><span class="line"><span class="comment">//一、挂载阶段(当组件实例被创建并插入 DOM 中时)：</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getDeriver</span>();</span><br><span class="line"><span class="title function_">reander</span>();</span><br><span class="line"><span class="title function_">componentDidMount</span>();</span><br><span class="line">过时 <span class="attr">api</span>:</span><br><span class="line"><span class="title function_">UNSAFE_componentWillMount</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//二、更新阶段(当组件的 props 或 state 发生变化时会触发更新)：</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getDrivedStatedFromProps</span>();</span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>();</span><br><span class="line"><span class="title function_">render</span>();</span><br><span class="line"><span class="title function_">getSnapshoutBeforeUpdate</span>();</span><br><span class="line"><span class="title function_">componentDidUpdate</span>();</span><br><span class="line">过时 <span class="attr">api</span>:</span><br><span class="line"><span class="title function_">UNSAFE_componentWillUpdate</span>();</span><br><span class="line">    <span class="title function_">UNSAFE_componentWillReceiveProps</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//卸载阶段(当组件从 DOM 中移除时):</span></span><br><span class="line"><span class="title function_">componentWillUnMount</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他API:</span></span><br><span class="line"><span class="title function_">setState</span>();</span><br><span class="line"><span class="title function_">forceUpdate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例属性:</span></span><br><span class="line">props;</span><br><span class="line">state;</span><br></pre></td></tr></table></figure><h2 id="3-学习过jQuery么？"><a href="#3-学习过jQuery么？" class="headerlink" title="(3)学习过jQuery么？"></a>(3)学习过<code>jQuery</code>么？</h2><p>我说自己只是初步了解<code>jQuery</code>。</p><h2 id="4-获取真实DOM的办法。"><a href="#4-获取真实DOM的办法。" class="headerlink" title="(4)获取真实DOM的办法。"></a>(4)获取真实<code>DOM</code>的办法。</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生js:</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;#id&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;标签&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;css选择器&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery:</span></span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;表签&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;css选择器&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//react:</span></span><br><span class="line">(<span class="number">1</span>)组件元素</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">findDOMNode</span>(<span class="title class_">ReactComponent</span>);</span><br><span class="line">(<span class="number">2</span>)组件内部元素</span><br><span class="line">设置<span class="attr">refs</span>: <span class="keyword">let</span> myRef = <span class="literal">null</span>;</span><br><span class="line">绑定<span class="attr">refs</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span>=&gt;</span>this.myRef = c;&#125;/&gt;</span></span><br><span class="line"> <span class="attr">or</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;myRef&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>(5)什么是虚拟<code>DOM</code>？为什么要使用虚拟<code>DOM</code>？</p><p>用<code>JavaScript</code> 对象结构表示 <code>DOM</code> 树的结构；然后用这个树构建一个真正的 <code>DOM</code> 树，插到文档当中 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异 把所记录的差异应用到所构建的真正的<code>DOM</code>树上，视图就更新了。<code>Virtual DOM</code> 本质上就是在 <code>JS</code> 和 <code>DOM</code> 之间做了一个缓存。</p><h2 id="6-看过react的源码吗？"><a href="#6-看过react的源码吗？" class="headerlink" title="(6)看过react的源码吗？"></a>(6)看过<code>react</code>的源码吗？</h2><p>我肯定还没啊。。。</p><h2 id="7-你是软件工程专业的，知道开闭原则么？"><a href="#7-你是软件工程专业的，知道开闭原则么？" class="headerlink" title="(7)你是软件工程专业的，知道开闭原则么？"></a>(7)你是软件工程专业的，知道开闭原则么？</h2><p> 开闭原则，在<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/254878">面向对象编程</a>领域中，规定“<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>中的<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1/2331271">对象</a>（<a href="https://baike.baidu.com/item/%E7%B1%BB/6824577">类</a>，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的”，这意味着一个实体是允许在不改变它的<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969">源代码</a>的前提下变更它的行为。该特性在产品化的环境中是特别有价值的，在这种环境中，改变源代码需要<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/3591047">代码审查</a>，<a href="https://baike.baidu.com/item/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/1917084">单元测试</a>以及诸如此类的用以确保产品使用质量的过程。遵循这种原则的代码在扩展时并不发生改变，因此无需上述的过程。 </p><h1 id="3、其他问题"><a href="#3、其他问题" class="headerlink" title="3、其他问题"></a>3、其他问题</h1><h2 id="1-你对薪资有什么要求么？"><a href="#1-你对薪资有什么要求么？" class="headerlink" title="(1)你对薪资有什么要求么？"></a>(1)你对薪资有什么要求么？</h2><p>这我能直接说明么？直接一波大话过去，什么实习生对薪资没什么要求，主要是来学习技能提升自我，增加实际经验…什么的。</p><h2 id="2-你为什么选深圳？"><a href="#2-你为什么选深圳？" class="headerlink" title="(2)你为什么选深圳？"></a>(2)你为什么选深圳？</h2><p>我醉了，我只是想找个实习，你公司在深圳，只能来深圳工作，我能说啥？</p><p>最后又是一波大话过去，什么深圳是一线城市、求职者的选择主流…等等等。</p><h2 id="3-你对现在大学生找工作越来越难，怎么看？"><a href="#3-你对现在大学生找工作越来越难，怎么看？" class="headerlink" title="(3)你对现在大学生找工作越来越难，怎么看？"></a>(3)你对现在大学生找工作越来越难，怎么看？</h2><p>我tmd，一堆公司把招聘面试卷成这样，我们大学生还能怎样。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 面试收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文档-Hexo】hexo 使用教程</title>
      <link href="/posts/6638260/"/>
      <url>/posts/6638260/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-安装教程"><a href="#hexo-安装教程" class="headerlink" title="hexo 安装教程"></a>hexo 安装教程</h1><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1、node-js下载安装"><a href="#1、node-js下载安装" class="headerlink" title="1、node.js下载安装"></a>1、node.js下载安装</h3><ul><li>Windows: <a href="https://nodejs.org/zh-cn/">官方链接</a> 。  </li><li>Mac: 使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。  </li><li>Linux: 从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。<br><strong>设置npm镜像</strong></li></ul><ul><li>npm 下载资源会比较慢，建议使用镜像替换  </li><li>在命令窗口执行下列命令:  <figure class="highlight javascript"><figcaption><span>1.8</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官方: npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npmjs.org   </span></span><br><span class="line">淘宝: npm config set registry <span class="string">&quot;http://registry.npmmirror.com&quot;</span>  </span><br></pre></td></tr></table></figure></li></ul><h3 id="2、申请-Github-账号"><a href="#2、申请-Github-账号" class="headerlink" title="2、申请 Github 账号"></a>2、申请 Github 账号</h3><ul><li><a href="https://github.com/">Github 官网</a></li></ul><h3 id="3、创建-github-仓库"><a href="#3、创建-github-仓库" class="headerlink" title="3、创建 github 仓库"></a>3、创建 github 仓库</h3><p><strong>注意，该仓库名为: github用户名.github.io</strong>。  </p><h3 id="4、安装git"><a href="#4、安装git" class="headerlink" title="4、安装git"></a>4、安装git</h3><ul><li>Windows: <a href="https://git-scm.com/downloads/">git下载地址</a></li><li>Mac: <a href="http://sourceforge.net/projects/git-osx-installer/">git下载地址</a></li><li>Linux: Ubuntu: <code>sudo apt-get install git-core</code>, Red Hat: <code>sudo yum install git-core</code><br>下载安装文件，双击执行安装</li></ul><h3 id="5、配置-ssh"><a href="#5、配置-ssh" class="headerlink" title="5、配置 ssh"></a>5、<a href="https://blog.csdn.net/x550392236/article/details/123069751">配置 ssh</a></h3><ul><li><strong>打开 git bash 终端</strong></li><li><strong>设置 user.name 和 user.email</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>生成 ssh 密钥</strong><br><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code><br>此时，你的用户文件夹(C:&#x2F;user&#x2F;***&#x2F;.ssh)下会有一个新的文件夹.ssh，里面有刚刚创建的ssh密钥文件id_rsa和id_rsa.pub。</li><li><strong>将 ssh 公钥添加到 GitHub 上</strong><br>进入GitHub-&gt;用户头像→Settings→SSH and GPG keys→New SSH key→将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮。</li></ul><h2 id="二、安装和配置-hexo"><a href="#二、安装和配置-hexo" class="headerlink" title="二、安装和配置 hexo"></a>二、安装和配置 hexo</h2><h3 id="1、安装命令"><a href="#1、安装命令" class="headerlink" title="1、安装命令:"></a>1、安装命令:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli   //全局安装</span><br><span class="line">$ npm install hexo  //局部安装hexo包</span><br></pre></td></tr></table></figure><h3 id="2、创建-hexo-项目"><a href="#2、创建-hexo-项目" class="headerlink" title="2、创建 hexo 项目"></a>2、创建 hexo 项目</h3><p>两种方式:  </p><ol><li><code>npx hexo &lt;command&gt;</code>。  </li><li>将 hexo 添加到环境变量中，就可直接使用命令 <code>hexo &lt;command&gt;</code></li></ol><h3 id="3、安装依赖"><a href="#3、安装依赖" class="headerlink" title="3、安装依赖"></a>3、安装依赖</h3><p>进入项目，执行命令:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="4、安装其他插件"><a href="#4、安装其他插件" class="headerlink" title="4、安装其他插件"></a>4、安装其他插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-admin --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="5、项目结构"><a href="#5、项目结构" class="headerlink" title="5、项目结构"></a>5、项目结构</h3><ul><li><strong>_config.yml</strong><br>网站的 配置 信息，您可以在此配置大部分的参数。  </li><li><strong>package.json</strong><br>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。  </li><li><strong>scaffolds</strong><br>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。  </li><li><strong>source</strong><br>资源文件夹是存放用户资源的地方。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。  </li><li><strong>themes</strong><br><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</li></ul><h3 id="6、初步使用"><a href="#6、初步使用" class="headerlink" title="6、初步使用"></a>6、初步使用</h3><ol><li>查看 hexo 版本  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure></li><li>生成静态页面<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></li><li>开启本地服务器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-将-hexo-部署到-GitHub"><a href="#7-将-hexo-部署到-GitHub" class="headerlink" title="7.将 hexo 部署到 GitHub"></a>7.将 hexo 部署到 GitHub</h3><ul><li>修改配置将<br>文件blog&#x2F;_config.yml中的deploy项的内容修改  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="comment"># 类型</span></span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># 仓库</span></span><br><span class="line">  repo: 仓库 `http/ssh` 地址</span><br><span class="line">  <span class="comment"># 分支</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><strong>type: git中的冒号后面有空格</strong></li><li>部署<br>命令:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清空静态页面</span></span><br><span class="line">$ hexo clean</span><br><span class="line"><span class="comment"># 生成静态页面</span></span><br><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># 部署 </span></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、hexo简单配置"><a href="#三、hexo简单配置" class="headerlink" title="三、hexo简单配置"></a>三、hexo简单配置</h2><h3 id="1、网站"><a href="#1、网站" class="headerlink" title="1、网站"></a>1、网站</h3><ul><li>title: 网站标题。  </li><li>subtitle: 网站副标题。  </li><li>description: 网站描述。  </li><li>keywords: 网站的关键词。支持多个关键词。  </li><li>author: 您的名字。  </li><li>language:网站使用的语言。常见的有 zh-Hans和 zh-CN。</li></ul><h3 id="2、-网址"><a href="#2、-网址" class="headerlink" title="2、 网址"></a>2、 网址</h3><ul><li>url: 网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头。  </li><li>root网站根目录。  </li><li>permalink: 文章的永久链接格式。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文档】MarkDown使用</title>
      <link href="/posts/303488101/"/>
      <url>/posts/303488101/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-MarkDown-的使用"><a href="#hexo-MarkDown-的使用" class="headerlink" title="hexo MarkDown 的使用"></a>hexo MarkDown 的使用</h1><p>可下载<a href="https://typoraio.cn/">typora</a>，快速编写markdown</p><h2 id="一、创建文章"><a href="#一、创建文章" class="headerlink" title="一、创建文章"></a>一、创建文章</h2><p>打开命令窗口，输入下列命令创建文章:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;title&quot;</span></span><br></pre></td></tr></table></figure><p>当输入命令后，就会在 source&#x2F;_post 文件夹下创建一个文件，命名为：title.md<br>这个文件就是将要发布到网站上的原始文件，用于记录文章内容  </p><h2 id="二、编写文章"><a href="#二、编写文章" class="headerlink" title="二、编写文章"></a>二、编写文章</h2><h3 id="1、Markdown-简介"><a href="#1、Markdown-简介" class="headerlink" title="1、Markdown 简介"></a>1、Markdown 简介</h3><blockquote><p>Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式</p></blockquote><h3 id="2、MarkDown-语法"><a href="#2、MarkDown-语法" class="headerlink" title="2、MarkDown 语法"></a>2、MarkDown 语法</h3><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="(1)标题"></a>(1)标题</h4><p>在markdown中标题使用#号表示，一个#代表1级标题，一共有6个级别，他们的大小依次变小<br>语法:</p><blockquote><p># 一级标题<br>## 二级标题<br>…<br>###### 六级标题</p></blockquote><h4 id="2-段落"><a href="#2-段落" class="headerlink" title="(2)段落"></a>(2)段落</h4><p>在markdown里面段落没有语法，但是你还是需要注意怎么划分段落<br>如果你一直编辑一段文字，没有空格两个以上并且按下回车键（换行），这一段文字就自成一段  </p><h4 id="3-字体"><a href="#3-字体" class="headerlink" title="(3)字体"></a>(3)字体</h4><p>在markdown里面也有斜体粗体，语法如下:<br>语法:</p><blockquote><p>*斜体文本*<br>**粗体文本**<br>***粗斜体文本***</p></blockquote><h4 id="4-分割线"><a href="#4-分割线" class="headerlink" title="(4)分割线"></a>(4)分割线</h4><p>分隔线在一行中，使用三个以上的星号、减号、下划线来建立<br>语法:</p><blockquote><p>***<br>-–<br>___</p></blockquote><h4 id="5-删除线"><a href="#5-删除线" class="headerlink" title="(5)删除线"></a>(5)删除线</h4><p>删除线就是给文本加上删除线，在文本两端使用两个波浪线 ~<br>语法:</p><blockquote><p>~~删除线文本~~</p></blockquote><h4 id="6-下划线"><a href="#6-下划线" class="headerlink" title="(6)下划线"></a>(6)下划线</h4><p>在markdown里面并没有关于下划线的语法，但是markdown允许你插入一些基本的HTML代码<br>语法:</p><blockquote><p>&lt;u&gt;下划线文本&lt;&#x2F;u&gt;</p></blockquote><h4 id="7-无序列表"><a href="#7-无序列表" class="headerlink" title="(7)无序列表"></a>(7)无序列表</h4><p>无序列表使用星号 * 、加号 + 、减号 -<br>语法:</p><blockquote><p>* 1<br>* 2<br>* 3</p><p>+ 1<br>+ 2<br>+ 3</p><p>- 1<br>- 2<br>- 3<br><em>注意需要和符号之间保持一个空格</em></p></blockquote><h4 id="8-有序列表"><a href="#8-有序列表" class="headerlink" title="(8) 有序列表"></a>(8) 有序列表</h4><p>有序列表其实很简单，就是数字加上.<br>文本使用空格隔开.<br>语法:</p><blockquote><ol><li>1</li><li>2</li><li>3</li></ol></blockquote><h4 id="9-嵌套使用"><a href="#9-嵌套使用" class="headerlink" title="(9) 嵌套使用"></a>(9) 嵌套使用</h4><p>有序和无序可以一起使用，只需要在子列表的选项添加四个空格<br>语法:</p><blockquote><ol><li>1:<br> - 1</li><li>2:<br> - 1</li></ol></blockquote><h4 id="10-区块"><a href="#10-区块" class="headerlink" title="(10) 区块"></a>(10) 区块</h4><p>区块是用来引用的，比如链接或者一段文本<br>在段落的开头使用 &gt; 符号，使用空格，隔开文本<br>在引用里面也是分段落的，我们不是使用回车，而是使用&gt;成单个一行<br>语法:</p><blockquote><p>&gt; 内容<br>&gt;<br>&gt; 内容</p></blockquote><h4 id="11-区块嵌套"><a href="#11-区块嵌套" class="headerlink" title="(11) 区块嵌套"></a>(11) 区块嵌套</h4><p>语法:  </p><blockquote><p>&gt; 引用<br>&gt;&gt; 2<br>&gt;&gt;<br>&gt;&gt;&gt; 3</p></blockquote><h4 id="12-代码块"><a href="#12-代码块" class="headerlink" title="(12) 代码块"></a>(12) 代码块</h4><p>这是一个程序员专用的语法，代码块可以展示不同语言的代码，并且有不同的高亮显示<br>语法:  </p><blockquote><p>` 单行代码 &#96;</p></blockquote><blockquote><p>`&#96;&#96; (代码类型)<br> 多行代码<br>`&#96;&#96;</p></blockquote><h4 id="13-超链接"><a href="#13-超链接" class="headerlink" title="(13) 超链接"></a>(13) 超链接</h4><blockquote><p>[文字描述](链接地址)</p></blockquote><h4 id="14-图片"><a href="#14-图片" class="headerlink" title="(14) 图片"></a>(14) 图片</h4><blockquote><p>![图片描述](图片的链接)  </p></blockquote><h4 id="15-表格"><a href="#15-表格" class="headerlink" title="(15) 表格"></a>(15) 表格</h4><p>在markdown里面是可以插入表格的，可以体现一些数据<br>语法:  </p><blockquote><p>| 表头 | 表头 |<br>| —- | —- |<br>| 单元格 | 单元格 |<br>| 单元格 | 单元格 |</p></blockquote><p>让表格自动对其方式<br>语法:  </p><blockquote><p>| 左对齐 | 右对齐 | 居中 |<br>| :—- | —-: | :—-: |<br>| 单元格 | 单元格 | 单元格 |</p></blockquote><h4 id="16-转义字符"><a href="#16-转义字符" class="headerlink" title="(16) 转义字符"></a>(16) 转义字符</h4><p>因为在markdown的语法里面，用了一些特定的符号作为语法，如果我们想输出符号，而不是被识别成语法，就需要使转义字符’&#39;<br>语法:  </p><blockquote><p>\        反斜线<br>`        反引号<br>*        星号<br>_        下划线<br>{}       花括号<br>[]       方括号<br>()       小括号<br>#        井字号<br>+        加号<br>-        减号<br>.        英文句点<br>!        感叹号</p></blockquote><h3 id="17、实现下标和上标"><a href="#17、实现下标和上标" class="headerlink" title="17、实现下标和上标"></a>17、实现下标和上标</h3><blockquote><p>下标: α<del>1</del><br>上标: x^2^<br><em>注意: 输入法是英文输入法</em></p></blockquote><h3 id="3、其他高级语法"><a href="#3、其他高级语法" class="headerlink" title="3、其他高级语法"></a>3、其他高级语法</h3><p>在大多的markdown编辑器中，可能无法展示高级语法，以上的语法完全够用，你也可以无需学习高级语法。</p><ul><li><p>数学公式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; <span class="number">0</span> \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; <span class="number">0</span> \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$&#123;$tep1&#125;&#123;\style&#123;<span class="attr">visibility</span>:hidden&#125;&#123;(x+<span class="number">1</span>)(x+<span class="number">1</span>)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></li><li><p>HTML元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Alt<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Del<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>流程图</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flow</span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"><span class="title function_">cond</span><span class="params">(yes)</span>-&gt;io-&gt;e</span><br><span class="line"><span class="title function_">cond</span><span class="params">(no)</span>-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
