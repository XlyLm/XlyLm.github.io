<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>butterfly 主题配置及美化</title>
      <link href="/posts/1439774903/"/>
      <url>/posts/1439774903/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>椭圆方程一面</title>
      <link href="/posts/651495063/"/>
      <url>/posts/651495063/</url>
      
        <content type="html"><![CDATA[<h1 id="椭圆方程一面"><a href="#椭圆方程一面" class="headerlink" title="椭圆方程一面"></a>椭圆方程一面</h1><h2 id="1、自我介绍。"><a href="#1、自我介绍。" class="headerlink" title="1、自我介绍。"></a>1、自我介绍。</h2><p>我是***，来自***大学计算机科学学院的软件工程专业的23届学生。在校选修了***专业…，并自学了前端相关知识，像：<code>html</code>、<code>css</code>、<code>js</code>和选学的 <code>react</code> 框架。在学习中，也利用自己学习的前端知识做了一些小项目，如***、***。【有些公司会比较看注你在学校里的一些经历，比如是否参加过团队或社团组织、参加过什么专业相关的比赛、是否和导师做过什么项目等。有就可以简要说一下。】</p><h2 id="2、专业知识"><a href="#2、专业知识" class="headerlink" title="2、专业知识"></a>2、专业知识</h2><h2 id="1-你学习的是react，那你对react了解多少？"><a href="#1-你学习的是react，那你对react了解多少？" class="headerlink" title="(1)你学习的是react，那你对react了解多少？"></a>(1)你学习的是react，那你对react了解多少？</h2><p><code>React</code> 就是 <code>Facebook</code> 的一个开源的、 用于构建用户界面的 <code>JS</code> 框架，专注的层面为<code>View</code>层，不包括数据访问层或者那种<code>Hash</code>路由。 <code>React</code> 专注的中心是 <code>Component</code>，即组件。 <code>React</code> 认为一切页面元素都可以抽象成组件，比如一个表单，或者表单中的某一项。</p><p><strong><code>React</code>有以下特点：</strong></p><ul><li>声明式设计：  <code>React</code>采用声明范式，可以轻松描述应用。 </li><li>高效：  <code>React</code>通过对DOM的模拟，最大限度地减少与DOM的交互。 </li><li>灵活 ：  <code>React</code>可以与已知的库或框架很好地配合。 </li><li><code>JSX</code>：   <code>JSX</code> 是 <code>JavaScript</code> 语法的扩展。 </li><li>组件：  通过 <code>React</code> 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li><li>单向响应的数据流 ：  <code>React</code> 实现了单向响应的数据流，从而减少了重复代码。</li></ul><h3 id="2-你用过那些react的钩子，说一下具体作用呢？"><a href="#2-你用过那些react的钩子，说一下具体作用呢？" class="headerlink" title="(2)你用过那些react的钩子，说一下具体作用呢？"></a>(2)你用过那些<code>react</code>的钩子，说一下具体作用呢？</h3><p>面试的时候没反应过来，以为面试官说的是 <code>hooks</code> 里面的钩子，就回答了：<code>useState</code>、<code>useEffect</code>、<code>useContext</code>、<code>useReducer</code>、<code>useCallback</code>。</p><p>结果面试官的意思是问<code>react</code>的生命周期钩子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//react生命周期主要分为三个阶段：</span></span><br><span class="line"><span class="comment">//一、挂载阶段(当组件实例被创建并插入 DOM 中时)：</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getDeriver</span>();</span><br><span class="line"><span class="title function_">reander</span>();</span><br><span class="line"><span class="title function_">componentDidMount</span>();</span><br><span class="line">过时 <span class="attr">api</span>:</span><br><span class="line"><span class="title function_">UNSAFE_componentWillMount</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//二、更新阶段(当组件的 props 或 state 发生变化时会触发更新)：</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getDrivedStatedFromProps</span>();</span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>();</span><br><span class="line"><span class="title function_">render</span>();</span><br><span class="line"><span class="title function_">getSnapshoutBeforeUpdate</span>();</span><br><span class="line"><span class="title function_">componentDidUpdate</span>();</span><br><span class="line">过时 <span class="attr">api</span>:</span><br><span class="line"><span class="title function_">UNSAFE_componentWillUpdate</span>();</span><br><span class="line">    <span class="title function_">UNSAFE_componentWillReceiveProps</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//卸载阶段(当组件从 DOM 中移除时):</span></span><br><span class="line"><span class="title function_">componentWillUnMount</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他API:</span></span><br><span class="line"><span class="title function_">setState</span>();</span><br><span class="line"><span class="title function_">forceUpdate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例属性:</span></span><br><span class="line">props;</span><br><span class="line">state;</span><br></pre></td></tr></table></figure><h3 id="3-学习过jQuery么？"><a href="#3-学习过jQuery么？" class="headerlink" title="(3)学习过jQuery么？"></a>(3)学习过<code>jQuery</code>么？</h3><p>我说自己只是初步了解<code>jQuery</code>。</p><h3 id="4-获取真实DOM的办法。"><a href="#4-获取真实DOM的办法。" class="headerlink" title="(4)获取真实DOM的办法。"></a>(4)获取真实<code>DOM</code>的办法。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原生js:</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;#id&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;标签&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;css选择器&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery:</span></span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;表签&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;css选择器&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//react:</span></span><br><span class="line">(<span class="number">1</span>)组件元素</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">findDOMNode</span>(<span class="title class_">ReactComponent</span>);</span><br><span class="line">(<span class="number">2</span>)组件内部元素</span><br><span class="line">设置<span class="attr">refs</span>: <span class="keyword">let</span> myRef = <span class="literal">null</span>;</span><br><span class="line">绑定<span class="attr">refs</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span>=&gt;</span>this.myRef = c;&#125;/&gt;</span></span><br><span class="line"> <span class="attr">or</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;myRef&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>(5)什么是虚拟<code>DOM</code>？为什么要使用虚拟<code>DOM</code>？</p><p>用<code>JavaScript</code> 对象结构表示 <code>DOM</code> 树的结构；然后用这个树构建一个真正的 <code>DOM</code> 树，插到文档当中 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异 把所记录的差异应用到所构建的真正的<code>DOM</code>树上，视图就更新了。<code>Virtual DOM</code> 本质上就是在 <code>JS</code> 和 <code>DOM</code> 之间做了一个缓存。</p><h3 id="6-看过react的源码吗？"><a href="#6-看过react的源码吗？" class="headerlink" title="(6)看过react的源码吗？"></a>(6)看过<code>react</code>的源码吗？</h3><p>我肯定还没啊。。。</p><h3 id="7-你是软件工程专业的，知道开闭原则么？"><a href="#7-你是软件工程专业的，知道开闭原则么？" class="headerlink" title="(7)你是软件工程专业的，知道开闭原则么？"></a>(7)你是软件工程专业的，知道开闭原则么？</h3><p> 开闭原则，在<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/254878">面向对象编程</a>领域中，规定“<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>中的<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1/2331271">对象</a>（<a href="https://baike.baidu.com/item/%E7%B1%BB/6824577">类</a>，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的”，这意味着一个实体是允许在不改变它的<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969">源代码</a>的前提下变更它的行为。该特性在产品化的环境中是特别有价值的，在这种环境中，改变源代码需要<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/3591047">代码审查</a>，<a href="https://baike.baidu.com/item/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/1917084">单元测试</a>以及诸如此类的用以确保产品使用质量的过程。遵循这种原则的代码在扩展时并不发生改变，因此无需上述的过程。 </p><h2 id="3、其他问题"><a href="#3、其他问题" class="headerlink" title="3、其他问题"></a>3、其他问题</h2><h3 id="1-你对薪资有什么要求么？"><a href="#1-你对薪资有什么要求么？" class="headerlink" title="(1)你对薪资有什么要求么？"></a>(1)你对薪资有什么要求么？</h3><p>这我能直接说明么？直接一波大话过去，什么实习生对薪资没什么要求，主要是来学习技能提升自我，增加实际经验…什么的。</p><h3 id="2-你为什么选深圳？"><a href="#2-你为什么选深圳？" class="headerlink" title="(2)你为什么选深圳？"></a>(2)你为什么选深圳？</h3><p>我醉了，我只是想找个实习，你公司在深圳，只能来深圳工作，我能说啥？</p><p>最后又是一波大话过去，什么深圳是一线城市、求职者的选择主流…等等等。</p><h3 id="3-你对现在大学生找工作越来越难，怎么看？"><a href="#3-你对现在大学生找工作越来越难，怎么看？" class="headerlink" title="(3)你对现在大学生找工作越来越难，怎么看？"></a>(3)你对现在大学生找工作越来越难，怎么看？</h3><p>我tmd，一堆公司把招聘面试卷成这样，我们大学生还能怎样。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 使用教程</title>
      <link href="/posts/6638260/"/>
      <url>/posts/6638260/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-安装教程"><a href="#hexo-安装教程" class="headerlink" title="hexo 安装教程"></a>hexo 安装教程</h1><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1、node-js下载安装"><a href="#1、node-js下载安装" class="headerlink" title="1、node.js下载安装"></a>1、node.js下载安装</h3><ul><li>Windows: <a href="https://nodejs.org/zh-cn/">官方链接</a> 。  </li><li>Mac: 使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。  </li><li>Linux: 从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。<br><strong>设置npm镜像</strong></li></ul><ul><li>npm 下载资源会比较慢，建议使用镜像替换  </li><li>在命令窗口执行下列命令:  <figure class="highlight javascript"><figcaption><span>1.8</span></figcaption><table><tr><td class="code"><pre><span class="line">官方: npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npmjs.org   </span></span><br><span class="line">淘宝: npm config set registry <span class="string">&quot;http://registry.npmmirror.com&quot;</span>  </span><br></pre></td></tr></table></figure></li></ul><h3 id="2、申请-Github-账号"><a href="#2、申请-Github-账号" class="headerlink" title="2、申请 Github 账号"></a>2、申请 Github 账号</h3><ul><li><a href="https://github.com/">Github 官网</a></li></ul><h3 id="3、创建-github-仓库"><a href="#3、创建-github-仓库" class="headerlink" title="3、创建 github 仓库"></a>3、创建 github 仓库</h3><p><strong>注意，该仓库名为: github用户名.github.io</strong>。  </p><h3 id="4、安装git"><a href="#4、安装git" class="headerlink" title="4、安装git"></a>4、安装git</h3><ul><li>Windows: <a href="https://git-scm.com/downloads/">git下载地址</a></li><li>Mac: <a href="http://sourceforge.net/projects/git-osx-installer/">git下载地址</a></li><li>Linux: Ubuntu: <code>sudo apt-get install git-core</code>, Red Hat: <code>sudo yum install git-core</code><br>下载安装文件，双击执行安装</li></ul><h3 id="5、配置-ssh"><a href="#5、配置-ssh" class="headerlink" title="5、配置 ssh"></a>5、配置 ssh</h3><ul><li><strong>打开 git bash 终端</strong></li><li><strong>设置 user.name 和 user.email</strong>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>生成 ssh 密钥</strong><br><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code><br>此时，你的用户文件夹(C:&#x2F;user&#x2F;***&#x2F;.ssh)下会有一个新的文件夹.ssh，里面有刚刚创建的ssh密钥文件id_rsa和id_rsa.pub。</li><li><strong>将 ssh 公钥添加到 GitHub 上</strong><br>进入GitHub-&gt;用户头像→Settings→SSH and GPG keys→New SSH key→将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮。</li></ul><h2 id="二、安装和配置-hexo"><a href="#二、安装和配置-hexo" class="headerlink" title="二、安装和配置 hexo"></a>二、安装和配置 hexo</h2><h3 id="1、安装命令"><a href="#1、安装命令" class="headerlink" title="1、安装命令:"></a>1、安装命令:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli   //全局安装</span><br><span class="line">$ npm install hexo  //局部安装hexo包</span><br></pre></td></tr></table></figure><h3 id="2、创建-hexo-项目"><a href="#2、创建-hexo-项目" class="headerlink" title="2、创建 hexo 项目"></a>2、创建 hexo 项目</h3><p>两种方式:  </p><ol><li><code>npx hexo &lt;command&gt;</code>。  </li><li>将 hexo 添加到环境变量中，就可直接使用命令 <code>hexo &lt;command&gt;</code></li></ol><h3 id="3、安装依赖"><a href="#3、安装依赖" class="headerlink" title="3、安装依赖"></a>3、安装依赖</h3><p>进入项目，执行命令:  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="4、安装其他插件"><a href="#4、安装其他插件" class="headerlink" title="4、安装其他插件"></a>4、安装其他插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-admin --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="5、项目结构"><a href="#5、项目结构" class="headerlink" title="5、项目结构"></a>5、项目结构</h3><ul><li><strong>_config.yml</strong><br>网站的 配置 信息，您可以在此配置大部分的参数。  </li><li><strong>package.json</strong><br>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。  </li><li><strong>scaffolds</strong><br>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。  </li><li><strong>source</strong><br>资源文件夹是存放用户资源的地方。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。  </li><li><strong>themes</strong><br><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</li></ul><h3 id="6、初步使用"><a href="#6、初步使用" class="headerlink" title="6、初步使用"></a>6、初步使用</h3><ol><li>查看 hexo 版本  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure></li><li>生成静态页面<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></li><li>开启本地服务器<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-将-hexo-部署到-GitHub"><a href="#7-将-hexo-部署到-GitHub" class="headerlink" title="7.将 hexo 部署到 GitHub"></a>7.将 hexo 部署到 GitHub</h3><ul><li>修改配置将<br>文件blog&#x2F;_config.yml中的deploy项的内容修改  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="comment"># 类型</span></span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># 仓库</span></span><br><span class="line">  repo: 仓库 `http/ssh` 地址</span><br><span class="line">  <span class="comment"># 分支</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><strong>type: git中的冒号后面有空格</strong></li><li>部署<br>命令:  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清空静态页面</span></span><br><span class="line">$ hexo clean</span><br><span class="line"><span class="comment"># 生成静态页面</span></span><br><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># 部署 </span></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、hexo简单配置"><a href="#三、hexo简单配置" class="headerlink" title="三、hexo简单配置"></a>三、hexo简单配置</h2><h3 id="1、网站"><a href="#1、网站" class="headerlink" title="1、网站"></a>1、网站</h3><ul><li>title: 网站标题。  </li><li>subtitle: 网站副标题。  </li><li>description: 网站描述。  </li><li>keywords: 网站的关键词。支持多个关键词。  </li><li>author: 您的名字。  </li><li>language:网站使用的语言。常见的有 zh-Hans和 zh-CN。</li></ul><h3 id="2、-网址"><a href="#2、-网址" class="headerlink" title="2、 网址"></a>2、 网址</h3><ul><li>url: 网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头。  </li><li>root网站根目录。  </li><li>permalink: 文章的永久链接格式。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用MarkDown</title>
      <link href="/posts/303488101/"/>
      <url>/posts/303488101/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-MarkDown-的使用"><a href="#hexo-MarkDown-的使用" class="headerlink" title="hexo MarkDown 的使用"></a>hexo MarkDown 的使用</h1><h2 id="一、创建文章"><a href="#一、创建文章" class="headerlink" title="一、创建文章"></a>一、创建文章</h2><p>打开命令窗口，输入下列命令创建文章:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;title&quot;</span></span><br></pre></td></tr></table></figure><p>当输入命令后，就会在 source&#x2F;_post 文件夹下创建一个文件，命名为：title.md<br>这个文件就是将要发布到网站上的原始文件，用于记录文章内容  </p><h2 id="二、编写文章"><a href="#二、编写文章" class="headerlink" title="二、编写文章"></a>二、编写文章</h2><h3 id="1、Markdown-简介"><a href="#1、Markdown-简介" class="headerlink" title="1、Markdown 简介"></a>1、Markdown 简介</h3><blockquote><p>Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式</p></blockquote><h3 id="2、MarkDown-语法"><a href="#2、MarkDown-语法" class="headerlink" title="2、MarkDown 语法"></a>2、MarkDown 语法</h3><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="(1)标题"></a>(1)标题</h4><p>在markdown中标题使用#号表示，一个#代表1级标题，一共有6个级别，他们的大小依次变小<br>语法:</p><blockquote><p># 一级标题<br>## 二级标题<br>…<br>###### 六级标题</p></blockquote><h4 id="2-段落"><a href="#2-段落" class="headerlink" title="(2)段落"></a>(2)段落</h4><p>在markdown里面段落没有语法，但是你还是需要注意怎么划分段落<br>如果你一直编辑一段文字，没有空格两个以上并且按下回车键（换行），这一段文字就自成一段  </p><h4 id="3-字体"><a href="#3-字体" class="headerlink" title="(3)字体"></a>(3)字体</h4><p>在markdown里面也有斜体粗体，语法如下:<br>语法:</p><blockquote><p>*斜体文本*<br>**粗体文本**<br>***粗斜体文本***</p></blockquote><h4 id="4-分割线"><a href="#4-分割线" class="headerlink" title="(4)分割线"></a>(4)分割线</h4><p>分隔线在一行中，使用三个以上的星号、减号、下划线来建立<br>语法:</p><blockquote><p>***<br>-–<br>___</p></blockquote><h4 id="5-删除线"><a href="#5-删除线" class="headerlink" title="(5)删除线"></a>(5)删除线</h4><p>删除线就是给文本加上删除线，在文本两端使用两个波浪线 ~<br>语法:</p><blockquote><p>~~删除线文本~~</p></blockquote><h4 id="6-下划线"><a href="#6-下划线" class="headerlink" title="(6)下划线"></a>(6)下划线</h4><p>在markdown里面并没有关于下划线的语法，但是markdown允许你插入一些基本的HTML代码<br>语法:</p><blockquote><p>&lt;u&gt;下划线文本&lt;&#x2F;u&gt;</p></blockquote><h4 id="7-无序列表"><a href="#7-无序列表" class="headerlink" title="(7)无序列表"></a>(7)无序列表</h4><p>无序列表使用星号 * 、加号 + 、减号 -<br>语法:</p><blockquote><p>* 1<br>* 2<br>* 3</p><p>+ 1<br>+ 2<br>+ 3</p><p>- 1<br>- 2<br>- 3<br><em>注意需要和符号之间保持一个空格</em></p></blockquote><h4 id="8-有序列表"><a href="#8-有序列表" class="headerlink" title="(8) 有序列表"></a>(8) 有序列表</h4><p>有序列表其实很简单，就是数字加上.<br>文本使用空格隔开.<br>语法:</p><blockquote><ol><li>1</li><li>2</li><li>3</li></ol></blockquote><h4 id="9-嵌套使用"><a href="#9-嵌套使用" class="headerlink" title="(9) 嵌套使用"></a>(9) 嵌套使用</h4><p>有序和无序可以一起使用，只需要在子列表的选项添加四个空格<br>语法:</p><blockquote><ol><li>1:<br> - 1</li><li>2:<br> - 1</li></ol></blockquote><h4 id="10-区块"><a href="#10-区块" class="headerlink" title="(10) 区块"></a>(10) 区块</h4><p>区块是用来引用的，比如链接或者一段文本<br>在段落的开头使用 &gt; 符号，使用空格，隔开文本<br>在引用里面也是分段落的，我们不是使用回车，而是使用&gt;成单个一行<br>语法:</p><blockquote><p>&gt; 内容<br>&gt;<br>&gt; 内容</p></blockquote><h4 id="11-区块嵌套"><a href="#11-区块嵌套" class="headerlink" title="(11) 区块嵌套"></a>(11) 区块嵌套</h4><p>语法:  </p><blockquote><p>&gt; 引用<br>&gt;&gt; 2<br>&gt;&gt;<br>&gt;&gt;&gt; 3</p></blockquote><h4 id="12-代码块"><a href="#12-代码块" class="headerlink" title="(12) 代码块"></a>(12) 代码块</h4><p>这是一个程序员专用的语法，代码块可以展示不同语言的代码，并且有不同的高亮显示<br>语法:  </p><blockquote><p>` 单行代码 &#96;</p></blockquote><blockquote><p>`&#96;&#96; (代码类型)<br> 多行代码<br>`&#96;&#96;</p></blockquote><h4 id="13-超链接"><a href="#13-超链接" class="headerlink" title="(13) 超链接"></a>(13) 超链接</h4><blockquote><p>[文字描述](链接地址)</p></blockquote><h4 id="14-图片"><a href="#14-图片" class="headerlink" title="(14) 图片"></a>(14) 图片</h4><blockquote><p>![图片描述](图片的链接)  </p></blockquote><h4 id="15-表格"><a href="#15-表格" class="headerlink" title="(15) 表格"></a>(15) 表格</h4><p>在markdown里面是可以插入表格的，可以体现一些数据<br>语法:  </p><blockquote><p>| 表头 | 表头 |<br>| —- | —- |<br>| 单元格 | 单元格 |<br>| 单元格 | 单元格 |</p></blockquote><p>让表格自动对其方式<br>语法:  </p><blockquote><p>| 左对齐 | 右对齐 | 居中 |<br>| :—- | —-: | :—-: |<br>| 单元格 | 单元格 | 单元格 |</p></blockquote><h4 id="16-转义字符"><a href="#16-转义字符" class="headerlink" title="(16) 转义字符"></a>(16) 转义字符</h4><p>因为在markdown的语法里面，用了一些特定的符号作为语法，如果我们想输出符号，而不是被识别成语法，就需要使转义字符’&#39;<br>语法:  </p><blockquote><p>\        反斜线<br>`        反引号<br>*        星号<br>_        下划线<br>{}       花括号<br>[]       方括号<br>()       小括号<br>#        井字号<br>+        加号<br>-        减号<br>.        英文句点<br>!        感叹号</p></blockquote><h3 id="3、其他高级语法"><a href="#3、其他高级语法" class="headerlink" title="3、其他高级语法"></a>3、其他高级语法</h3><p>在大多的markdown编辑器中，可能无法展示高级语法，以上的语法完全够用，你也可以无需学习高级语法。</p><ul><li><p>数学公式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; <span class="number">0</span> \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; <span class="number">0</span> \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$&#123;$tep1&#125;&#123;\style&#123;<span class="attr">visibility</span>:hidden&#125;&#123;(x+<span class="number">1</span>)(x+<span class="number">1</span>)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></li><li><p>HTML元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Alt<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Del<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>流程图</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">flow</span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"><span class="title function_">cond</span><span class="params">(yes)</span>-&gt;io-&gt;e</span><br><span class="line"><span class="title function_">cond</span><span class="params">(no)</span>-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
